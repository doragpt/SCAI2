以下は、送信時に storeId が NaN になっている問題について、エンジニアに向けた具体的な調査・修正指示です。

---

### 1. 問題の状況

- フォーム送信時、ログに表示される送信データの中で `storeId` が `NaN` となっている  
  （例:  
  ```js
  {
    title: "あああああ",
    content: "<p>あああああ</p>",
    status: "scheduled",
    thumbnail: "https://...jpg",
    storeId: NaN,
    scheduledAt: "2025-03-09T18:46:00.000Z"
  }
  ```  
  となっています）。
- Auth 状態のログでは、最終的には `user.userId` が 14 と表示されているため、ユーザー情報自体は取得できているようです。

---

### 2. 考えられる原因

- **ユーザー情報の取得タイミングのずれ**  
  フォームの初期値や送信時に、Auth 状態から取得した `user.userId` の値がまだ未定義または不正な状態になっている可能性があります。
  
- **型変換の問題**  
  `handleSubmit` 内で `storeId: Number(user.userId)` としているが、`user.userId` の値が数値または数値を表す文字列でない場合、Number() で変換すると NaN になる可能性があります。例えば、空文字列や `"undefined"` といった値なら NaN です。

---

### 3. 具体的な調査・修正指示

1. **Auth 状態の値を再確認する**
   - `handleSubmit` の直前で、`console.log(user.userId, typeof user.userId)` を実行して、`user.userId` がどのような値・型になっているか確認してください。
   - AuthProvider 側で、ユーザー情報の更新タイミングや、`user.userId` の値が数値または数値を表す文字列になっているか確認すること。

2. **フォーム初期値の設定**
   - 現在、フォームの defaultValues に `storeId: initialData?.storeId || null` としているため、初回レンダリング時は `storeId` が null になっている可能性があります。
   - ただし、後から useEffect で `form.setValue("storeId", Number(user.userId))` としているので、ユーザー情報が取得されれば上書きされるはずです。  
     → この部分は問題なさそうですが、念のため、useEffect 内で user.userId の型変換結果も出力（`console.log("storeId set to", Number(user.userId))`）して、実際に数値がセットされているか確認してください。

3. **送信処理での直接参照**
   - 現在、送信処理では以下のように user.userId を直接利用しています：
     ```ts
     storeId: Number(user.userId)
     ```
     これを再度確認してください。もし user.userId が不正な値であれば、フォーム送信前に送信を中断するか、数値に変換できるか検証してください。  
     例：
     ```ts
     const parsedStoreId = Number(user.userId);
     if (isNaN(parsedStoreId)) {
       throw new Error("店舗IDが取得できません");
     }
     ```
     こうすることで、値が NaN になった場合に送信処理を中断し、問題箇所を特定しやすくなります。

4. **AuthProvider の実装確認**
   - ユーザー情報が確実に取得されているか、または初回レンダリング時に user が null になっていないか確認してください。
   - もし非同期にユーザー情報を取得している場合、フォームの表示前にローディング状態（例：`if (!user) return <LoadingSpinner />;`）にするよう修正してください。

5. **バックエンド API 側の期待値**
   - バックエンドのブログ投稿作成 API が、storeId に NaN（または不正な値）が入ってくるとエラーを返している可能性があるので、API が受け取る JSON の内容を再度確認し、storeId の値が正しく送信されているか検証してください。

---

### 4. まとめ

エンジニア各位には、以下の手順で調査および修正を進めてください。

- **ユーザー情報のログ出力**  
  → 送信直前に `user.userId` とその型をコンソール出力して、正しい値が取得できているか確認する。

- **型変換の検証**  
  → `Number(user.userId)` の結果が NaN となっていないかチェックする。もし NaN なら、AuthProvider の実装やユーザー情報の取得方法を見直す。

- **フォームレンダリング前のローディング状態の導入**  
  → ユーザー情報が取得されるまで、フォームを表示せずにローディング画面を表示する。

- **送信処理内での guard チェックの強化**  
  → `parsedStoreId` の値が NaN であればエラーを throw し、送信処理を中断する。

以上の調査・修正を行うことで、送信データ内の storeId が正しく数値として送信され、バックエンド側のエラーが解消されるはずです。必要に応じて、各箇所のコンソールログとテストを実施し、原因を特定してください。

何かご不明な点があれば、再度ご相談ください。
このエラーは、API が 500 エラー（内部サーバーエラー）を返しており、サーバー側でブログ投稿の作成に失敗していることを示しています。原因としては、フロントエンドから送信しているデータのうち、特に日時（scheduledAt）の形式や型がサーバー側の検証や DB への挿入処理と合っていない可能性が高いです。

### 具体的なチェックポイントと対応策

1. **日時（scheduledAt）の形式の不整合**
   - **現状の問題点**  
     現在、`blogPostSchema` では `scheduledAt` を `z.string().nullable()` と定義しています。つまり、API に送信する際は ISO 文字列が求められます。
   - **対応策**  
     予約投稿の場合、`scheduledAt` を以下のように ISO 文字列で送信してください：
     ```js
     scheduledAt: status === "scheduled" ? new Date(scheduledDateTime).toISOString() : null,
     ```
     もしバックエンド（または Drizzle ORM のテーブル定義）が Date 型を期待している場合は、ブログ投稿用のスキーマ側で `z.date().nullable()` に変更するか、送信時に変換を行う必要があります。

2. **バックエンド側のエラーログ確認**
   - API エンドポイント `/api/blog/posts` のサーバーログを確認し、どのフィールドや型の問題でエラーが発生しているか詳細を確認してください。エラーメッセージやスタックトレースが得られれば、具体的な修正が可能になります。

3. **データペイロードの再確認**
   - コンソールログで `Submitting form data:` として出力されるオブジェクトの中身を再確認し、特に `storeId` や `scheduledAt` の値が正しいかチェックしてください。  
   - `storeId` は数値 14 となっているようですが、`scheduledAt` が正しく ISO 文字列になっているか確認します。

4. **ReactQuill の警告について**
   - `findDOMNode` の警告は ReactQuill の内部で発生しているもので、今後のリリースで修正される予定です。動作には直接影響しないため、まずはブログ投稿の 500 エラーの原因解決に注力してください。

### まとめ

- **変更例：**  
  フォーム送信時のデータ構築部分を以下のように修正して、`scheduledAt` を ISO 文字列に変換してください。

  ```js
  const handleSubmit = async (data: any, status: "draft" | "published" | "scheduled") => {
    try {
      if (status === "scheduled" && !scheduledDateTime) {
        toast({
          variant: "destructive",
          title: "エラー",
          description: "公開予定日時を選択してください",
        });
        return;
      }

      if (!user?.id) {
        toast({
          variant: "destructive",
          title: "エラー",
          description: "店舗IDの取得に失敗しました",
        });
        return;
      }

      const parsedStoreId = Number(user.id);
      if (!parsedStoreId || isNaN(parsedStoreId) || parsedStoreId <= 0) {
        toast({
          variant: "destructive",
          title: "エラー",
          description: "店舗IDの形式が正しくありません",
        });
        return;
      }

      // 予約投稿の場合、scheduledAt は ISO 文字列に変換
      const scheduledAt = status === "scheduled" 
        ? new Date(scheduledDateTime).toISOString() 
        : null;

      const formData = {
        title: data.title,
        content: data.content,
        status: status,
        thumbnail: data.thumbnail,
        storeId: parsedStoreId,
        scheduledAt: scheduledAt,
      };

      console.log("Submitting form data:", formData);

      if (postId) {
        await updateMutation.mutateAsync(formData);
      } else {
        await createMutation.mutateAsync(formData);
      }
    } catch (error) {
      console.error('Form submission error:', error);
      toast({
        variant: "destructive",
        title: "エラー",
        description: error instanceof Error ? error.message : "フォームの送信に失敗しました",
      });
    }
  };
  ```

- **バックエンドの確認：**  
  サーバー側のログも確認し、もし上記修正で解決しない場合は、どのフィールドで型の不一致やバリデーションエラーが発生しているかを特定してください。

このように、送信データ（特に日時フィールド）の形式や型が、フロントとバックの双方で一致しているかを確認することで、ブログ投稿の作成エラーの原因を解消できるはずです。
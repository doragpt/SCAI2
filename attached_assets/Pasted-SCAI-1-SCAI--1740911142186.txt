SCAI プロジェクト指示計画書
1. プロジェクト概要と目的
プロジェクト名: SCAI
目的:
風俗スカウトの従来の流れ（女の子の情報登録→店舗に総当たりで送信→店舗からの条件提示→採用確定/キャンセル）をAIで自動化し、店舗向けに求人支援サービスを提供します。
主なメリット:
登録後すぐに複数店舗へ情報が送られるため、採用のスピードアップ
店舗側の作業負荷を大幅に軽減
AIマッチングにより、最適な候補者の抽出が可能
固定の広告料金モデルで運用し、人件費をほぼゼロに抑える
2. 主要な機能と内容
A. 女性（求職者）向け機能
登録フォーム

入力項目:
希望保証（例: 5万円）
希望期間（例: 3/10〜3/15）
当日入り希望の有無（デフォルトは前日入り）
年齢、体型（身長、体重、バスト・ウエスト・ヒップ）
希望業種、出発地
画像アップロード: 最大30枚（必須：無加工顔写真3枚、下着/水着2枚、オプションで宣材・タトゥー・自撮りなど）
宣材の有無（なし、無加工のみ、加工済みのみ、両方の選択）
髪色に近い写真の選択（複数選択可能）
プレビュー・確認機能

ユーザーが入力内容を一覧で確認し、「この内容で確定」または「修正する」を選択可能。
会員ページ／下書き保存機能

ユーザーがアカウントを作成し、入力途中の内容や過去の登録情報を保存・再編集できる。
質問機能

「質問あります」ボタンで店舗に質問を送信し、回答があれば通知する仕組み。
キャンセル制限

キャンセル回数が3回に達すると、登録が停止される仕組み。
B. 店舗向け機能
店舗事前登録

店舗情報（店名、業種、エリア、採用基準、単価レンジ、交通費、寮費、連絡先など）を登録する。
応募者閲覧・条件提示

登録された女性のプロフィール（写真、条件、希望など）を閲覧し、各店舗が自社に合うか判断。
条件入力フォームで具体的な条件（保証、単価、待機時間など）と連絡先を入力し、AIを経由して女性に通知する。
採用確定・キャンセル機能

店舗が最終的に採用を確定またはキャンセルする操作を行い、確定後に女性に連絡先を開示する。
店舗評価機能

店舗が応募者に対して、条件取り消しの頻度などをフィードバックし、問題のある応募者を排除する仕組み。
C. 共通機能
AIマッチングロジック

女性のプロフィールと店舗の希望条件を照合し、マッチ度に応じた推薦を行う。
初期はシンプルなIF文やルールベースのマッチング、将来的には機械学習モデルの導入も検討。
通知機能

LINE APIやSMTPを用いた自動通知機能。
例: 店舗から条件提示があると、対象の女性にLINEで通知する。
認証機能

女性・店舗両方のユーザーがログインし、個別のマイページにアクセスできるようにする。
セキュリティ対策

入力値の検証、エラーハンドリング、パスワードのハッシュ化、環境変数を用いた機密情報の管理。
3. 技術スタック
フロントエンド:
React.js, React Router, axios
バックエンド:
Python, Flask, SQLAlchemy
データベース:
AWS RDS（MySQL）※開発時はSQLiteも検討
画像ストレージ:
AWS S3（boto3を利用）
通知:
LINE API（requestsライブラリを利用）
その他:
GitHubでコード管理、Replit上での開発・デプロイ
4. プロジェクトのディレクトリ構成
以下は、プロジェクト全体のディレクトリ構成の一例です。

csharp
コピーする
platform/
├── frontend/                   # Reactフロントエンド
│   ├── public/                 # 静的ファイル（index.html、favicon.ico）
│   ├── src/                    # ソースコード
│   │   ├── components/         # 各コンポーネント
│   │   │   ├── GirlRegistration.js  # 女性登録フォーム
│   │   │   ├── ShopResponse.js      # 店舗からの条件提示フォーム
│   │   │   └── Confirmation.js      # 採用確定／キャンセル画面
│   │   ├── pages/              # ページ単位のコンポーネント
│   │   │   ├── Home.js         # ホーム画面
│   │   │   ├── GirlProfile.js  # 女性のプロフィール詳細
│   │   │   └── ShopDashboard.js # 店舗向け管理画面
│   │   ├── App.js              # メインアプリ（ルーティング管理）
│   │   └── index.js            # エントリーポイント
│   └── package.json            # Node.js依存関係
├── backend/                    # Flaskバックエンド
│   ├── app.py                  # Flaskのメインアプリ
│   ├── models/                 # データモデル（SQLAlchemy）
│   │   ├── girl.py             # 女性ユーザーモデル
│   │   ├── shop.py             # 店舗モデル
│   │   └── application.py      # 応募・採用のモデル
│   ├── services/               # ロジック層
│   │   ├── ai_matching.py      # AIマッチングロジック
│   │   ├── notification.py     # LINE通知のロジック
│   │   └── image_processing.py # AWS S3画像アップロード処理
│   ├── routes/                 # APIルート
│   │   ├── girl_routes.py      # 女性登録API
│   │   ├── shop_routes.py      # 店舗応募・条件提示API
│   │   └── application_routes.py # 採用確定／キャンセルAPI
│   ├── config.py               # 設定ファイル（DB接続、APIキーなど）
│   └── requirements.txt        # Python依存パッケージ
├── scripts/                    # デプロイ・ビルドスクリプト
│   └── deploy.sh               # デプロイ用シェルスクリプト
├── tests/                      # テストコード
│   └── test_ai_matching.py     # AIマッチング機能のテスト
└── README.md                   # プロジェクト概要とセットアップ手順
5. 開発ステップとタイムライン
フェーズ1: 設計と基盤準備（1〜2週間）
要件定義・仕様書作成:

各画面、APIの詳細仕様、データモデルを文書化
UIデザインのワイヤーフレーム作成（紙またはオンラインツール）
Replit環境の設定:

GitHubからリポジトリをインポート
バックエンド用Replとフロントエンド用ReplのそれぞれのRunコマンド設定
Secrets機能でAPIキーなどの環境変数設定
フェーズ2: 基本機能の実装（3〜4週間）
バックエンド実装:

app.pyと各APIルート（/api/girl/register、/api/shop/respond、/api/application/confirm など）の実装
データモデルの実装（女性、店舗、応募データ）
AWS S3アップロードやLINE通知の基本実装（モック実装からスタート）
フロントエンド実装:

女性向け登録フォーム（GirlRegistration.js）の作成
店舗側応募フォーム（ShopResponse.js）と確定/キャンセル画面（Confirmation.js）の作成
React Routerでのページ遷移設定（App.js）
フェーズ3: 拡張機能・連携の実装（3〜4週間）
ユーザー認証とマイページ:

サインアップ・ログイン機能の実装
下書き保存・プロフィール編集機能の追加
店舗管理画面:

店舗が応募状況を確認・条件提示できるダッシュボードの作成
AIマッチング機能の実装:

初期はシンプルなルールベースのマッチングを実装
将来的な機械学習モデルの拡張を考慮した設計
通知機能の強化:

LINE APIとの連携を実際にテストし、通知文の改善
フェーズ4: テスト・フィードバックと最終調整（2〜3週間）
総合テスト:

単体テスト、統合テストを実施し、エラーや不具合を修正
ユーザーシナリオに沿った動作確認（登録→プレビュー→採用確定→通知まで）
セキュリティ強化:

入力バリデーション、認証、例外処理の実装強化
HTTPS化や環境変数管理の徹底
デプロイ設定:

CI/CDパイプラインの構築（Replit内または外部サービスとの連携）
本番環境での動作確認とパフォーマンス最適化
フェーズ5: 正式リリースと運用開始
リリース準備:

サイト公開（Replit Deploy機能や外部ホスティングサービスへの移行検討）
プレスリリース、SNSプロモーションで認知拡大
運用開始:

ユーザーサポート、ログ・パフォーマンスモニタリングの開始
定期的なアップデートとフィードバック反映
6. プロジェクト管理と運用のポイント
タスク管理:

Trello、Notion、またはGitHub Projectsを使用してタスクと進捗を管理
各フェーズごとのマイルストーンと納期を明確に設定
コード管理:

GitHubでブランチ運用を行い、Pull Requestでレビューを実施
README.mdにセットアップ手順、使用方法、デプロイ手順を記載しておく
運用とサポート:

本番公開後はエラーログ、パフォーマンス、セキュリティ監視ツール（Sentry、New Relicなど）の導入を検討
ユーザーからのフィードバックを収集し、PDCAサイクルで機能改善を実施
7. Replitの無料プランと有料プランの利用
無料プラン:

基本的な開発、テスト、デバッグは無料プランで十分可能。
ただし、メモリやCPUの制限、Replが自動スリープする点に注意。
小規模な開発段階やアルファテストには最適。
有料プラン:

開発が進み、安定稼働や常時公開が必要になった場合、有料プラン（Coreプランなど）にアップグレード。
リソースが増えるため、ビルド時間の短縮や安定性が向上。
プライベートReplの作成や共同作業がスムーズになる点もメリット。
8. まとめ
この指示計画書は、SCAIプロジェクトをReplit上で完成させるための全体の流れと詳細なタスク、技術スタック、注意点を初心者向けに説明したものです。

最初はGitHubからReplitにリポジトリをインポートし、環境設定から始めます。
バックエンド（Flask）とフロントエンド（React）の基本機能を個別に実装し、動作確認を行います。
順次、ユーザー認証、下書き保存、AIマッチング、通知機能などを追加し、総合テストとフィードバック反映で仕上げます。
開発が進んだら、無料プランから有料プランへ移行し、常時公開やパフォーマンス最適化を図ります。
この計画書に沿って、一つ一つ段階的に実装を進めれば、SCAIプロジェクトをReplit上で完成させ、実際に運用できるシステムに仕上げることができるはずです。
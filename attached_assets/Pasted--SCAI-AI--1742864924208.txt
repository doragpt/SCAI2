了解しました。SCAIのリポジトリ全体を解析し、現在の機能実装状況（女性プロフィール管理、店舗求人登録、マッチング処理など）を把握した上で、AIマッチング機能実装に向けて必要な構造・処理の整理と、エンジニアに的確に指示できるような最適提案を行います。

完了次第、実装状況・提案指針・改善ポイントなどを整理してお伝えします。

# 現在の実装状況の概要

SCAIプラットフォーム（風俗求人マッチング）の現状実装をコードから確認したところ、**基本的なデータ構造と主要機能の骨格**はできていますが、一部は未完成です。女性ユーザー（タレント）と店舗ユーザー双方のプロフィール・求人情報の保存は実装されており、AIマッチングの計算ロジックも組み込まれています。ただし、**応募後の交渉や合意、連絡先交換といったフロー**はまだ実装途中です。以下、各機能ごとの詳細をまとめます。

## 女性ユーザープロフィール管理機能

**実装状況**：女性ユーザー向けのプロフィール登録・編集機能は、**豊富な項目**が用意され、データベーススキーマとバリデーションも実装されています。`talent_profiles`テーブルに、名前（姓・名）やカナ、所在地（都道府県）、最寄駅、身分証の種類、身体情報、SNS情報、NG項目など多岐にわたる属性が保存されます ([SCAI2/shared/schema.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/shared/schema.ts#:~:text=user_id%3A%20integer%28)) ([SCAI2/shared/schema.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/shared/schema.ts#:~:text=esthe_options%3A%20jsonb%28))。バックエンドではZodによる入力チェック（バリデーション）が設定されており、必須項目や入力形式の制約があります。例えば、**姓/名は1文字以上必須**で、カナは全角カタカナのみ許可されています ([SCAI2/shared/schema.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/shared/schema.ts#:~:text=last_name%3A%20z.string%28%29.min%281%2C%20))。身長・体重には現実的な範囲（身長100～200cm、体重30～150kg）が設定され、カップサイズも選択必須です ([SCAI2/shared/schema.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/shared/schema.ts#:~:text=height%3A%20z))。プロフィール写真は最低1枚必要で、「現在の髪色」のタグが付いた写真が必須になるなど、細かい要件もコード上に記載されています（バリデーションルールで実装済み）。  

**保存構造**：女性プロフィールは`talent_profiles`テーブルで管理され、`users`テーブルのIDと1対1で関連付けられます ([SCAI2/shared/schema.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/shared/schema.ts#:~:text=export%20const%20talentProfiles%20%3D%20pgTable%28,))。主要項目として、氏名（カナ含む）、所在地、最寄駅、**身長・体重・スリーサイズ・カップ**、顔出し可否、SNS利用有無、現在/過去の在籍店舗、自己紹介文、NG項目（受け入れ不可サービスやアレルギー等）などが含まれています ([SCAI2/shared/schema.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/shared/schema.ts#:~:text=last_name%3A%20text%28)) ([SCAI2/shared/schema.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/shared/schema.ts#:~:text=sns_urls%3A%20jsonb%28))。特に、**身分証明書の種類**や**アレルギー情報**、**喫煙習慣**などもJSONフィールドで保持しており、業界特有の細かな情報まで網羅されています。  

**バリデーション**：入力チェックはほぼ全項目に設定されており、例えば「身分証は最低1つ選択」「カップサイズ必須」「電話番号やSNSは任意」等がコード上コメント付きで定義されています ([SCAI2/shared/schema.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/shared/schema.ts#:~:text=available_ids%3A%20z.object%28)) ([SCAI2/shared/schema.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/shared/schema.ts#:~:text=))。不正な入力時には日本語メッセージ付きのエラーを返すようになっています。現状、年齢（生年月日）はユーザーテーブルから取得して補完する設計で、プロフィール自体には生年月日フィールドは必須ではありません ([SCAI2/server/routes/talent.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/routes/talent.ts#:~:text=%2F%2F%20%E7%94%9F%E5%B9%B4%E6%9C%88%E6%97%A5%E6%83%85%E5%A0%B1%E3%81%8C%E3%81%AA%E3%81%84%E5%A0%B4%E5%90%88%E3%81%AF%E3%80%81%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E3%83%87%E3%83%BC%E3%82%BF%E3%81%8B%E3%82%89%E8%BF%BD%E5%8A%A0))。

**実装済みの機能**：  
- プロフィール取得（GET `/talent/profile`）：ログインユーザーのプロフィールをDBから取得する。プロフィール未作成の場合は`null`を返す実装です ([SCAI2/server/routes/talent.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/routes/talent.ts#:~:text=if%20%28%21profile%29%20))。  
- プロフィール作成・更新（POST `/talent/profile`）：入力内容を`talentProfileSchema`で検証し、**存在しない場合は新規作成、存在する場合は更新**する処理が書かれています ([SCAI2/server/routes/talent.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/routes/talent.ts#:~:text=router,)) ([SCAI2/server/routes/talent.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/routes/talent.ts#:~:text=const%20validatedData%20%3D%20talentProfileSchema))。バリデーションOKなデータのみ保存するため、UIでの入力ミスもある程度バックエンドで防止できます。  

**未実装/留意点**：  
- **プロフィール写真の保存・閲覧**：写真データは`photos`フィールド（JSON配列）で扱う前提ですが、そのアップロード処理（例えばS3連携）は実装中か要確認です。コード上`upload.ts`ルートがあるのでアップロード機能は着手されていますが、UIからどう登録するか詰めが必要です。  
- **UIへの反映**：非常に多項目なプロフィールなので、画面上での入力フォーム配置、必須項目の案内、エラー表示などをしっかり設計する必要があります。エンジニアには**「どの項目が最重要か」「入力を段階的に分けるか」**などUXの観点も伝えると良いでしょう。

## 店舗ユーザーの求人情報登録・管理機能

**実装状況**：店舗（求人掲載側）向けには、`store_profiles`テーブルを用いて**求人票に相当する店舗プロフィール**を管理します。こちらもデータ構造とバリデーションが用意され、**店舗情報＋募集要項**を広くカバーする項目があります。店舗プロフィールには、店舗名、地域（都道府県）、業種、キャッチコピー、仕事内容の詳細、給与（最低/最高保証額や平均時給）、勤務時間、待遇（送迎・宿泊サポート等）、応募資格、採用担当者名、連絡先（電話・メール）、SNSや公式サイトURLなどが含まれます ([SCAI2/shared/schema.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/shared/schema.ts#:~:text=business_name%3A%20text%28)) ([SCAI2/shared/schema.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/shared/schema.ts#:~:text=address%3A%20text%28))。  

**保存構造**：`store_profiles`テーブルは店舗ユーザー (`users`テーブルでroleがstore) と1対1の関係で、1店舗ユーザーにつき原則1つの求人情報を持ちます（＝1ユーザー=1店舗想定）。コード上も、プロフィールが存在しなければ新規挿入、既にあれば更新というロジックになっており、**複数求人の管理には対応していません** ([SCAI2/server/routes/store.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/routes/store.ts#:~:text=const%20)) ([SCAI2/server/routes/store.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/routes/store.ts#:~:text=%2F%2F%20%E3%83%97%E3%83%AD%E3%83%95%E3%82%A3%E3%83%BC%E3%83%AB%E3%81%8C%E5%AD%98%E5%9C%A8%E3%81%97%E3%81%AA%E3%81%84%E5%A0%B4%E5%90%88%E3%81%AF%E6%96%B0%E8%A6%8F%E4%BD%9C%E6%88%90))。今後、**一人の店舗ユーザーが複数店舗や複数求人を出す可能性**がある場合は、設計変更（1対多）も検討が必要です。ただ現状は1店舗ユーザー=1求人の前提でしょう。  

**登録項目**：必須項目として、**キャッチコピー**(募集の一言アピール)と**仕事内容の説明**があり、文字数制限付きでバリデーションされています ([SCAI2/shared/schema.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/shared/schema.ts#:~:text=catch_phrase%3A%20z))。**採用担当者名**と**電話番号**も必須で、電話番号は最低1つ・最大4つまでの配列で入力する仕様です ([SCAI2/shared/schema.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/shared/schema.ts#:~:text=address%3A%20z))。オプション項目として住所、メールアドレス（最大4つ、各メール形式チェックあり）、SNS関連（ID/URL/紹介文）、公式サイトURL、応募資格テキスト、アクセス情報（最寄駅や交通手段説明）、セキュリティ対策説明などが任意入力できます ([SCAI2/shared/schema.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/shared/schema.ts#:~:text=%2F%2F%20%E9%9B%BB%E8%A9%B1%E7%95%AA%E5%8F%B7%EF%BC%88%E6%9C%80%E5%A4%A74%E3%81%A4%E3%80%81%E6%9C%80%E4%BD%8E1%E3%81%A4%E5%BF%85%E9%A0%88%EF%BC%89)) ([SCAI2/shared/schema.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/shared/schema.ts#:~:text=application_requirements%3A%20z.string%28%29.max%281000%2C%20))。待遇面では、**送迎(交通費)サポートや宿泊サポート**の有無がブール値であり、それ以外の特典は`benefits`配列や`special_offers`配列で保持します。給与関連として、最低保証・最高保証額、平均時給、勤務時間数といった数値も持ち、**0以上の整数**という制約で検証しています ([SCAI2/shared/schema.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/shared/schema.ts#:~:text=benefits%3A%20z.array%28z.enum%28allBenefitTypes%29%29.default%28))。求人公開ステータスも`status`フィールドで管理され、「draft（下書き）」か「published（公開）」を取ります ([SCAI2/shared/schema.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/shared/schema.ts#:~:text=average_hourly_pay%3A%20integer%28))。コードでは新規作成時デフォルト`draft`にしておき、管理画面から公開処理を行う流れが想定されます。  

**実装済みの機能**:  
- 店舗プロフィール取得（GET `/store/profile`）：現在ログイン中の店舗ユーザーの求人情報を取得します。該当データがなければ404を返しています ([SCAI2/server/routes/store.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/routes/store.ts#:~:text=const%20)) ([SCAI2/server/routes/store.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/routes/store.ts#:~:text=if%20%28%21profile%29%20))。  
- 店舗プロフィール作成・更新（PATCH `/store/profile`）：店舗ユーザーがプロフィールを登録・編集するエンドポイントです。既存プロフィールを検索し ([SCAI2/server/routes/store.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/routes/store.ts#:~:text=const%20))、なければ**ユーザー登録情報から基本項目を埋めて新規作成**（この際、一部はリクエストボディから取得） ([SCAI2/server/routes/store.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/routes/store.ts#:~:text=const%20insertData%20%3D%20)) ([SCAI2/server/routes/store.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/routes/store.ts#:~:text=))します。既存プロフィールがある場合はリクエストの差分を反映して更新します ([SCAI2/server/routes/store.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/routes/store.ts#:~:text=const%20updateData%20%3D%20)) ([SCAI2/server/routes/store.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/routes/store.ts#:~:text=recruiter_name%3A%20req))。いずれの場合も、`storeProfileSchema`で定義されたバリデーション（必須/形式）が適用され、不備があれば400エラーとなります ([SCAI2/server/routes/store.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/routes/store.ts#:~:text=log%28%27info%27%2C%20%27%E6%9B%B4%E6%96%B0%E3%83%87%E3%83%BC%E3%82%BF%27%2C%20)) ([SCAI2/server/routes/store.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/routes/store.ts#:~:text=average_hourly_pay%3A%20updateData))。更新処理では、**空文字項目は既存値を維持**し、配列項目は`validateArrayField`ユーティリティでフォーマット確認の上保存しています ([SCAI2/server/routes/store.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/routes/store.ts#:~:text=description%3A%20fullUpdateData)) ([SCAI2/server/routes/store.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/routes/store.ts#:~:text=recruiter_name%3A%20fullUpdateData))。  
- 店舗ダッシュボード統計（GET `/store/stats`）：店舗側の管理画面用に、応募数などの統計情報を返す機能も実装されています ([SCAI2/server/routes/store.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/routes/store.ts#:~:text=%2F%2F%20%E5%BA%97%E8%88%97%E3%83%80%E3%83%83%E3%82%B7%E3%83%A5%E3%83%9C%E3%83%BC%E3%83%89%E7%B5%B1%E8%A8%88%E6%83%85%E5%A0%B1%E5%8F%96%E5%BE%97))。ここで応募状況（後述）の集計を行っており、新規応募件数・保留件数・承諾済件数などを計算しています ([SCAI2/server/routes/store.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/routes/store.ts#:~:text=%2F%2F%20%E5%BF%9C%E5%8B%9F%E8%80%85%E5%AF%BE%E5%BF%9C%E7%8A%B6%E6%B3%81))。  

**未実装/留意点**:  
- **求人公開フロー**：プロフィールの`status`切り替え（下書き→公開）を行うUI/APIがまだ見当たりません。おそらくPATCH `/store/profile`で`status: "published"`を送れば公開扱いになりますが、フロント側で公開ボタンを用意する必要があります。公開中のみがマッチング検索に出る仕様なので、**「いつ公開するか」**の運用をエンジニアと詰める必要があります ([SCAI2/shared/schema.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/shared/schema.ts#:~:text=average_hourly_pay%3A%20integer%28)) ([SCAI2/server/utils/matching.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/utils/matching.ts#:~:text=const%20storeResults%20%3D%20await%20db))。  
- **複数求人対応**：現状は1ユーザー=1求人想定ですが、将来的に店舗ユーザーが複数店舗や職種を登録したい要望が出るかもしれません。その場合、`store_profiles`をユーザーと1対多に変更し、APIも新規作成・一覧取得等を拡張する必要があります。現段階では急ぎませんが、**事業方針として単一求人で十分か**確認しておくと良いでしょう。  
- **入力項目のUX**：店舗プロフィールも入力項目が多岐にわたります。エンジニアには、**「入力画面を分割するか（基本情報・待遇・連絡先でタブ分け等）」**や**「必須項目が未入力の場合のガイド」**など、UI設計上の配慮ポイントを共有しましょう。特に電話番号は配列で複数入力可能なため、+ボタンで行追加するUIなどが必要です。  

## AIマッチング機能の実装状況

**実装状況**：女性ユーザー向けに、プロフィールと求人情報のマッチングを行う**AIマッチング機能**が実装されています。実際には機械学習モデルではなく、**事前に定めた条件のマッチ度合いをスコア算出**するルールベースのアルゴリズムです。`GET /talent/ai-matching`エンドポイントでログインユーザーのプロフィールと、公開中求人を照合し、スコア順のマッチリストを返しています ([SCAI2/server/routes/talent.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/routes/talent.ts#:~:text=%2F%2F%20%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E3%82%AF%E3%82%A8%E3%83%AA%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF)) ([SCAI2/server/routes/talent.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/routes/talent.ts#:~:text=const%20matchResults%20%3D%20await%20performAIMatching%28req,searchOptions))。  

**モデル構造・条件**：マッチングアルゴリズムでは、以下の要素を比較しそれぞれ0.0～1.0のスコアを計算します（1.0が完全一致） ([SCAI2/server/utils/matching.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/utils/matching.ts#:~:text=%2F%2F%20%E5%B9%B4%E9%BD%A2%E3%82%B9%E3%82%B3%E3%82%A2%E8%A8%88%E7%AE%97)) ([SCAI2/server/utils/matching.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/utils/matching.ts#:~:text=%2F%2F%20%E5%9C%B0%E5%9F%9F%E3%82%B9%E3%82%B3%E3%82%A2%E8%A8%88%E7%AE%97))。  

- **年齢**：タレント年齢が店舗求人の希望年齢範囲に収まるかでスコア計算（範囲内なら1.0、外れると差に応じて減点する方式） ([SCAI2/server/utils/matching.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/utils/matching.ts#:~:text=if%20%28minAge%20%26%26%20maxAge%29%20)) ([SCAI2/server/utils/matching.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/utils/matching.ts#:~:text=const%20distanceFromRange%20%3D%20talentAge%20,minAge))。範囲指定がなければ満点扱いです。  
- **体型スペック**：身長－体重の値（コード上「spec」）が求人側の希望範囲にマッチするか ([SCAI2/server/utils/matching.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/utils/matching.ts#:~:text=%2F%2F%20%E5%B9%B4%E9%BD%A2%E3%82%B9%E3%82%B3%E3%82%A2%E8%A8%88%E7%AE%97))。範囲外でも差分が小さければある程度の点を与える計算です ([SCAI2/server/utils/matching.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/utils/matching.ts#:~:text=if%20,0)) ([SCAI2/server/utils/matching.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/utils/matching.ts#:~:text=const%20distanceFromRange%20%3D%20talentSpec%20,minSpec))。加えて「特定のカップサイズの場合は別条件」というコメントがありますが、現時点ではカップサイズによる特別処理は未実装で、**CUP_SIZEスコアは仮に0.5固定**としています ([SCAI2/server/utils/matching.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/utils/matching.ts#:~:text=%2F%2F%20%E3%82%AB%E3%83%83%E3%83%97%E3%82%B5%E3%82%A4%E3%82%BA%E3%82%B9%E3%82%B3%E3%82%A2%EF%BC%88%E7%8F%BE%E5%9C%A8%E3%81%AF%E4%BB%AE%E3%82%B9%E3%82%B3%E3%82%A2%E3%80%81%E3%83%87%E3%83%BC%E3%82%BF%E3%81%8C%E5%88%A9%E7%94%A8%E5%8F%AF%E8%83%BD%E3%81%AB%E3%81%AA%E3%81%A3%E3%81%9F%E3%82%89%E6%8B%A1%E5%BC%B5%EF%BC%89))。今後タレントのカップサイズを考慮した詳細ロジックを追加予定との記述があります。  
- **勤務地エリア**：タレントの現在地や希望エリアと、店舗所在地の一致度 ([SCAI2/server/utils/matching.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/utils/matching.ts#:~:text=%2F%2F%20%E5%9C%B0%E5%9F%9F%E3%82%B9%E3%82%B3%E3%82%A2%E8%A8%88%E7%AE%97))。現状は「同一都道府県なら1.0、一致しなくてもタレントの希望エリアリストに含まれる都道府県なら0.8、それ以外は0.2」といったシンプルな評価です ([SCAI2/server/utils/matching.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/utils/matching.ts#:~:text=%2F%2F%20%E5%AE%8C%E5%85%A8%E4%B8%80%E8%87%B4)) ([SCAI2/server/utils/matching.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/utils/matching.ts#:~:text=if%20,0))。※将来的に「近隣県」などのグルーピングでスコアを調整する可能性が示唆されています ([SCAI2/server/utils/matching.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/utils/matching.ts#:~:text=%2F%2F%20%E3%82%A8%E3%83%AA%E3%82%A2%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97%E3%81%AB%E3%82%88%E3%82%8B%E8%BF%91%E6%8E%A5%E3%82%B9%E3%82%B3%E3%82%A2%EF%BC%88%E5%BF%85%E8%A6%81%E3%81%AB%E5%BF%9C%E3%81%98%E3%81%A6%E5%AE%9F%E8%A3%85%EF%BC%89))。  
- **報酬（保証額）**：タレントの希望最低報酬額と、店舗の保証額レンジを比較しています ([SCAI2/server/utils/matching.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/utils/matching.ts#:~:text=scores))。店舗の**最高保証**または**最低保証**がタレント希望を満たしていれば1.0、足りない場合は比率で減点するロジックです ([SCAI2/server/utils/matching.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/utils/matching.ts#:~:text=%2F%2F%20%E5%BA%97%E8%88%97%E3%81%AE%E6%9C%80%E5%A4%A7%E4%BF%9D%E8%A8%BC%E3%81%8C%E5%B8%8C%E6%9C%9B%E9%A1%8D%E3%82%92%E4%B8%8A%E5%9B%9E%E3%81%A3%E3%81%A6%E3%81%84%E3%82%8B)) ([SCAI2/server/utils/matching.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/utils/matching.ts#:~:text=%2F%2F%20%E6%9C%80%E4%BD%8E%E4%BF%9D%E8%A8%BC%E3%81%AF%E3%81%82%E3%82%8B%E3%81%8C%E5%B8%8C%E6%9C%9B%E9%A1%8D%E3%81%AB%E5%B1%8A%E3%81%8B%E3%81%AA%E3%81%84%E5%A0%B4%E5%90%88))。ただし、**タレントの希望額（desiredGuarantee）は現状ハードコーディング**で20,000円に設定されています ([SCAI2/server/utils/matching.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/utils/matching.ts#:~:text=%2F%2F%20%E5%B8%8C%E6%9C%9B%E5%A0%B1%E9%85%AC%E9%A1%8D%EF%BC%88%E3%83%87%E3%83%95%E3%82%A9%E3%83%AB%E3%83%88%E5%80%A4%E3%82%92%E8%A8%AD%E5%AE%9A%EF%BC%89))。つまり、まだタレント側に希望給与を入力させていないため、暫定的に“一律2万円希望”として計算している状態です。この点は後述する改善事項です。  
- **業種マッチ**：タレントの希望業種と店舗業種の一致を見ています ([SCAI2/server/utils/matching.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/utils/matching.ts#:~:text=%2F%2F%20%E5%A0%B1%E9%85%AC%E3%82%B9%E3%82%B3%E3%82%A2%E8%A8%88%E7%AE%97))。ただ、タレントプロフィール上に希望業種の情報が無いため、現在はタレント側の希望業種リストは空で計算されています ([SCAI2/server/utils/matching.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/utils/matching.ts#:~:text=%2F%2F%20%E5%B8%8C%E6%9C%9B%E6%A5%AD%E7%A8%AE%E5%8F%96%E5%BE%97%EF%BC%88%E3%83%87%E3%83%95%E3%82%A9%E3%83%AB%E3%83%88%E7%A9%BA%E9%85%8D%E5%88%97%EF%BC%89))。結果、**現状では常に0点**（一致しない扱い）になります。ゆくゆくはタレントに希望業種を選ばせ、そこに店舗業種がマッチした場合スコアを1.0与える形にする予定でしょう ([SCAI2/server/utils/matching.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/utils/matching.ts#:~:text=function%20calculateServiceTypeScore%28talentServiceTypes%3A%20string,number))。  

各項目のスコアには**重み付け**が設定され、総合スコアを算出します。コード上、重みは「年齢25%、地域20%、体型15%、カップサイズ15%、保証15%、業種10%」と定義されています ([SCAI2/server/utils/matching.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/utils/matching.ts#:~:text=const%20WEIGHTS%20%3D%20))。例えば年齢・地域のマッチングが特に重要視され、業種は低めです。これら重みに基づき、各スコアの加重平均で**総合マッチ度（0～1）**を計算し、百分率表示のため0～100に換算して返却しています ([SCAI2/server/utils/matching.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/utils/matching.ts#:~:text=benefits%3A%20store))。この重み設定は事業側の意図するマッチング優先度を表すものなので、**必要に応じて調整**可能です（エンジニアに伝えれば変更は容易です）。

**出力内容**：AIマッチングAPIのレスポンスは、各マッチ求人ごとに店舗名や業種、キャッチコピー、給与レンジなどの基本情報と、算出スコア（マッチ度％）および**マッチした理由のリスト**を含みます ([SCAI2/server/utils/matching.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/utils/matching.ts#:~:text=const%20matchResult%20%3D%20)) ([SCAI2/server/utils/matching.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/utils/matching.ts#:~:text=description%3A%20store))。**マッチ理由**は例えば「年齢条件に合致しています」「希望エリアに合致しています」「希望報酬条件を満たしています」等、スコアが高かった項目について自動生成されます ([SCAI2/server/utils/matching.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/utils/matching.ts#:~:text=const%20reasons%3A%20string)) ([SCAI2/server/utils/matching.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/utils/matching.ts#:~:text=if%20%28scores.CUP_SIZE%20%3E%200.8%29%20reasons.push%28))。また、店舗側の特典として送迎や宿泊サポートがある場合、「交通費サポートあり」なども理由に加えています ([SCAI2/server/utils/matching.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/utils/matching.ts#:~:text=%2F%2F%20%E5%BA%97%E8%88%97%E7%89%B9%E6%9C%89%E3%81%AE%E9%AD%85%E5%8A%9B%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88)) ([SCAI2/server/utils/matching.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/utils/matching.ts#:~:text=if%20%28storeProfile.benefits.includes%28))。このように理由を示すことで、**なぜその求人がおすすめなのかをユーザーに伝える工夫**がされています。

**未実装/留意点**:  
- **タレント希望項目の不足**：前述の通り、**タレントの希望給与額や希望業種**を入力・保存する仕組みが未完成です。そのため現在は仮の値や空リストで代用しています ([SCAI2/server/utils/matching.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/utils/matching.ts#:~:text=%2F%2F%20%E5%B8%8C%E6%9C%9B%E5%A0%B1%E9%85%AC%E9%A1%8D%EF%BC%88%E3%83%87%E3%83%95%E3%82%A9%E3%83%AB%E3%83%88%E5%80%A4%E3%82%92%E8%A8%AD%E5%AE%9A%EF%BC%89)) ([SCAI2/server/utils/matching.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/utils/matching.ts#:~:text=%2F%2F%20%E5%B8%8C%E6%9C%9B%E6%A5%AD%E7%A8%AE%E5%8F%96%E5%BE%97%EF%BC%88%E3%83%87%E3%83%95%E3%82%A9%E3%83%AB%E3%83%88%E7%A9%BA%E9%85%8D%E5%88%97%EF%BC%89))。事業方針として「女性が希望条件を提示できるようにする」のか、「店舗条件に女性が合わせる形で十分」なのかを決め、もし前者であればプロフィール項目に**希望日給/時給や希望業種**を追加し、マッチングロジックに反映させる必要があります。  
- **マッチング精度調整**：このマッチングはルールベースのため、例えば**年齢差が少しオーバーでも0.8点**となりますが、現場感覚で許容すべきかなど微調整の余地があります。重み付け含め、事業主の優先順位に応じて**スコアリング基準をチューニング**するフェーズが残っています。エンジニアと相談して、「例えば業種マッチをもう少し重視したい」「カップサイズもぴったり合えばボーナスを与えたい」などの要望があれば、対応可能です。  
- **検索フィルター**：コード上`searchOptions`として、地域や業種でフィルタリングする仕組みが準備されていますが ([SCAI2/server/routes/talent.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/routes/talent.ts#:~:text=const%20searchOptions%20%3D%20))、現時点ではこのパラメータを使った絞り込みは実装されていません（常に全公開求人を対象にマッチング） ([SCAI2/server/utils/matching.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/utils/matching.ts#:~:text=const%20storeResults%20%3D%20await%20db))。将来的に、女性ユーザーが「関東地方だけ」「業種はデリヘルだけ」など検索条件を入れた場合に対応できるよう、`performAIMatching`関数内で`searchOptions`を反映する処理を追加する必要があります。UI側でフィルター入力欄を設ける予定なら、エンジニアに伝えておきましょう。  
- **リアルタイム性とパフォーマンス**：現在の実装では、AIマッチングAPIが呼ばれるたびにすべての公開求人を取得しスコア計算しています ([SCAI2/server/utils/matching.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/utils/matching.ts#:~:text=const%20storeResults%20%3D%20await%20db)) ([SCAI2/server/utils/matching.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/utils/matching.ts#:~:text=%2F%2F%20%E5%90%84%E5%BA%97%E8%88%97%E3%81%A8%E3%81%AE%E3%83%9E%E3%83%83%E3%83%81%E3%83%B3%E3%82%B0%E8%A8%88%E7%AE%97))。現状件数が少ないうちは問題ありませんが、求人が増えると応答時間が延びる可能性があります。将来的には事前計算やキャッシュも検討課題ですが、まずは機能優先でよいでしょう。

## 条件提示・交渉・合意・連絡先開示フロー

**実装状況**：応募から採用決定に至るフローは、基本的な応募登録と一覧表示までは実装されていますが、**交渉や最終合意、連絡先交換に関する処理は未完成**です。

- **応募エントリー**：女性ユーザーは求人詳細を見て「応募」する想定で、POST `/applications/:jobId`（jobIdは店舗求人ID）により応募データが作成されます ([SCAI2/server/routes/applications.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/routes/applications.ts#:~:text=router.post%28,))。応募時には応募メッセージ(任意)とともにレコードが新規挿入され、ステータスは**初期値 "pending"（保留中）**で記録されます ([SCAI2/server/routes/applications.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/routes/applications.ts#:~:text=const%20validatedData%20%3D%20applicationSchema.parse%28))。同じユーザーが同じ求人に重複応募すると400エラーになります ([SCAI2/server/routes/applications.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/routes/applications.ts#:~:text=))。この応募API自体は問題なく動作する状態です。  

- **応募一覧表示**：応募後の閲覧について、**双方の一覧取得機能**が実装されています。女性側はGET `/applications/talent`で自分の応募履歴リストを取得でき、応募した店舗名や応募日時、ステータスなどが確認できます ([SCAI2/server/routes/applications.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/routes/applications.ts#:~:text=.select%28)) ([SCAI2/server/routes/applications.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/routes/applications.ts#:~:text=updated_at%3A%20applications))。店舗側もGET `/applications/store`で自社求人への応募者一覧を取得可能で、応募者のユーザー名や所在地、応募メッセージが見られます ([SCAI2/server/routes/applications.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/routes/applications.ts#:~:text=%2F%2F%20%E3%82%B9%E3%83%88%E3%82%A2%E3%81%8C%E4%BF%9D%E6%9C%89%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E6%B1%82%E4%BA%BA%E3%81%AB%E5%AF%BE%E3%81%99%E3%82%8B%E5%BF%9C%E5%8B%9F%E3%82%92%E5%8F%96%E5%BE%97)) ([SCAI2/server/routes/applications.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/routes/applications.ts#:~:text=username%3A%20users))。これにより、**誰がどの求人に応募したか**は双方確認可能です。ただし、ここまでの段階では連絡先情報（電話やメール）は相手に開示されません。実際、マッチング結果や応募一覧のデータにも電話番号やメールアドレスは含まれていません ([SCAI2/server/utils/matching.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/utils/matching.ts#:~:text=const%20matchResult%20%3D%20))。  

- **条件提示・交渉**：応募後の**条件交渉（待遇やシフトのすり合わせ等）**に関しては、現行コード上に専用の機能は見当たりません。例えば「店舗から給与条件の再提示を送る」といったAPIやデータ構造は未実装です。今後実装する場合、`applications`テーブルに交渉用のフィールド（店舗からの提示内容や応諾可否など）を追加し、PUT/PATCHで更新するような流れになるでしょうが、現時点では**交渉ステップはスキップ**されていると言えます。事業主として、交渉機能が必要か（あるいは応募＝合意とみなす簡易フローで良いか）をエンジニアに指示する必要があります。

- **合意（採用確定）**：応募者を店舗が「採用決定」または「お断り」する処理も未実装です。コード上は応募ステータスに`"accepted"`（承諾済み）という値が想定されており、店舗ダッシュボード統計で**accepted数＝採用完了数**としてカウントしています ([SCAI2/server/routes/store.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/routes/store.ts#:~:text=accepted%3A%20count)) ([SCAI2/server/routes/store.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/routes/store.ts#:~:text=%2F%2F%20%E5%BF%9C%E5%8B%9F%E8%80%85%E5%AF%BE%E5%BF%9C%E7%8A%B6%E6%B3%81))。しかし、肝心の「ステータスをpendingからacceptedに更新するAPI（またはrejectにするAPI）」が見当たりません。つまり、**応募を承諾/拒否するボタンに対応するバックエンド処理が未完成**です。このままだと、応募は溜まるものの採用完了状態にできないため、エンジニアに早急に**「応募承認／不承認機能」を追加して欲しい**と伝えるべきです。

- **連絡先開示**：応募が承諾され採用合意となった段階で、**初めて双方に連絡先を開示する**想定と思われます。店舗プロフィールに登録されている電話番号やメールは公開情報ではなく、採用成立時に女性側へ知らせる仕組みでしょう。しかし、これも現状は未実装です。応募ステータス変更機能がないため当然ですが、例えばステータスを`accepted`に更新した際に、自動メールで相手に連絡先を送る、あるいはフロントエンドで「連絡先表示」ボタンを有効化する、といった処理が必要になります。コード上はまだそのロジックは書かれていないため、**「採用合意後にどのように連絡先を通知するか」**を詰める必要があります。エンジニアには、UI上で連絡先を見せるのか、メッセージ機能で交換させるのか、仕様を指示してください。

**今後追加・検討すべき事項**：  
- 応募承認/拒否の管理機能（応募詳細画面で店舗が「この子を採用」「お断り」を選択→応募ステータス変更、通知）  
- **通知機能**：応募があった際の店舗通知、承認/拒否された際のタレント通知（メールやアプリ内通知）も今後必要になるかもしれません。現状ログ出力のみなので、ビジネス上必要なら優先度を決めてエンジニアに依頼しましょう。  
- **交渉フェーズ**：もしチャットのようなやり取りで条件調整させたい場合、メッセージ機能の開発が大掛かりになります。そこまでやるか、ある程度シンプルに「応募＝採用前提、細かい確認はオフラインで」とするか、事業判断ポイントです。エンジニアには不要な実装を避けるためにも、**交渉プロセスの有無**を明確に伝えましょう。  

## エンジニアへの指示ポイントと今後の実装タスク

以上を踏まえ、事業主としてエンジニアに伝えるべき改善・追加実装のポイントを整理します。

**1. AIマッチング精度と入力項目拡充**  
現在のAIマッチングは基本的な条件比較はできていますが、**タレントの希望条件入力**が不足しています。エンジニアには以下を依頼しましょう: 

- *希望給与額の入力とマッチング反映*: タレントプロフィールに「希望日給/時給」を追加し、マッチング時に現在固定値 ([SCAI2/server/utils/matching.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/utils/matching.ts#:~:text=%2F%2F%20%E5%B8%8C%E6%9C%9B%E5%A0%B1%E9%85%AC%E9%A1%8D%EF%BC%88%E3%83%87%E3%83%95%E3%82%A9%E3%83%AB%E3%83%88%E5%80%A4%E3%82%92%E8%A8%AD%E5%AE%9A%EF%BC%89))を使っている部分をこの値に差し替えてください。併せてUIで女性が希望額を設定できるようにします。  
- *希望業種の入力*: 複数選択でも構いませんので、タレントが「興味のある業種」を選べるようにし、それをマッチングスコアに使ってください（現在は常に0点のため）。  
- *マッチングロジックの微調整*: 現行の重みやスコア計算ロジック ([SCAI2/server/utils/matching.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/utils/matching.ts#:~:text=const%20WEIGHTS%20%3D%20))について、事業側の意図（例：「年齢マッチは重視」「カップサイズも重要視したい」など）があれば伝え、それに沿って係数を調整してもらいましょう。コード上定数を変えるだけで済みます。また、年齢や体型の許容度合い（何歳差まで満点か等）も変更可能なので、必要に応じて議論します。  

**2. 応募後のフロー実装**  
応募が来てから採用確定までの**管理機能を早急に完成**させるよう依頼します:

- *応募詳細画面と承認/辞退ボタン*: エンジニアに、店舗側UIで各応募に対し「採用する」「今回は見送る」のボタンを実装し、その操作を受け取るバックエンドAPI（例：`PATCH /applications/{applicationId}`）を作ってもらいましょう。成功時には応募ステータスを`accepted`または`rejected`に更新し、応募者に通知できるようにします。  
- *連絡先開示*: 採用承諾となった場合のみ、女性側に店舗の連絡先（電話・メール等）を見せる処理を組んでもらいます。具体的には、`accepted`になった応募に紐づく店舗プロフィールの連絡先情報を返すAPIや、そのUI表示です。セキュリティのため、この情報は承諾時以外は伏せるよう徹底します。  

**3. UI上の表示・入力UX**  
機能要件以外に、**ユーザーが使いやすい画面**になるようエンジニアと認識合わせします:

- *プロフィール項目の優先順位*: 非常に情報量が多いため、例えば「氏名/年齢/所在地は登録時必須だが、詳細プロフィールは後で入力でもOK」とするなど段階的入力も検討できます。エンジニアに現在の必須設定 ([SCAI2/shared/schema.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/shared/schema.ts#:~:text=last_name%3A%20z.string%28%29.min%281%2C%20))を確認してもらい、必要なら一部項目を任意化する調整も可能です。事業戦略上、登録ハードルを下げたい場合は相談しましょう。  
- *マッチング結果の見せ方*: 現状バックエンドはマッチ度％と理由リストを返しています。これをフロントで**見やすい形（例：スコアの横に「年齢マッチ◎」「エリア△」などアイコン表示）**で表示するよう依頼します。エンジニアに対し、「マッチ理由文言 ([SCAI2/server/utils/matching.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/utils/matching.ts#:~:text=if%20%28scores.AGE%20%3E%200.8%29%20reasons.push%28))をそのまま箇条書き表示する」だけでなく、UI的に工夫して欲しい旨を伝えましょう（デザインが必要ならデザイナーとも共有）。  
- *エラーメッセージの表示*: バリデーションエラー時のメッセージ（日本語文言）はバックエンドから返っています ([SCAI2/server/routes/store.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/routes/store.ts#:~:text=if%20%28error.name%20%3D%3D%3D%20%27ZodError%27%29%20))。エンジニアには、それらをフォーム上に表示し、ユーザーが修正できるようハンドリングすることを確認します。特に電話やメールの入力上限エラーなど、ユーザーが気づきにくい箇所もあるので注意です。  

**4. 今後のタスク優先度**  
最後に、開発を進める上での**優先順位**を整理すると次のようになります:

1. **応募承認/拒否機能の実装** – プラットフォームの完結性に関わるため最優先。【未対応: 応募ステータス変更APIと通知処理】  
2. **連絡先開示と通知ロジック** – 上記とセットで、採用マッチングを完了させるために必要。【未対応: ステータスに応じた連絡先提供】  
3. **タレント希望条件入力の拡充** – マッチング精度向上とユーザー満足度のため。【未対応: 希望給与・業種のUIと保存】  
4. **マッチングアルゴリズム調整** – ビジネス優先順位に合わせた微調整（重み・基準値の変更）。【要確認: 重み定数やスコア計算の妥当性】  
5. **UI/UX改善** – フォーム入力支援、結果表示のわかりやすさなど細かな改善。【継続対応: デザイン・文言調整】  
6. **通知機能全般** – 応募があった際のメール通知など、重要度に応じて検討。  

以上の点をエンジニアと共有し、現在のコード ([SCAI2/server/routes/applications.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/routes/applications.ts#:~:text=const%20validatedData%20%3D%20applicationSchema.parse%28)) ([SCAI2/server/routes/store.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/routes/store.ts#:~:text=%2F%2F%20%E5%BF%9C%E5%8B%9F%E8%80%85%E5%AF%BE%E5%BF%9C%E7%8A%B6%E6%B3%81))を踏まえて**「何をいつまでに実装すべきか」**合意しておくと良いでしょう。事業主としては、まず**採用成立までの一連の流れを完成**させ、その上でマッチング精度や利便性を向上させる段階的アプローチを指示するのがおすすめです。各タスクの優先順位を明確に伝えることで、開発がスムーズに進み、認識齟齬も防げます。  

今後、エンジニアとのコミュニケーションでは、**業務フロー（募集～採用）の想定**や**ユーザー視点での使い勝手**を具体的に伝え、上記のような観点で開発を進めてもらってください。必要に応じてこの解析結果を引用しながら指示を出せば、認識合わせに役立つはずです。 ([SCAI2/server/routes/applications.ts at main · doragpt/SCAI2 · GitHub](https://github.com/doragpt/SCAI2/blob/main/server/routes/applications.ts#:~:text=const%20validatedData%20%3D%20applicationSchema.parse%28))
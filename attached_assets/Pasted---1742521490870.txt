以下の内容をエンジニア宛にご連絡ください。下記は、現状のエラーおよび不整合を解消するために、具体的に修正すべき箇所と変更内容の指示文です。

---

件名: 【修正依頼】求人フォーム保存時エラーおよびスキーマ不整合の修正について

お疲れ様です。現在、求人フォームの保存処理で以下のエラーが発生しており、スキーマ定義とフォーム実装に不整合が見受けられます。つきましては、下記の内容に沿って各ファイルの修正をお願いします。

【1. schema.ts の修正】

① **Jobsテーブル定義の修正**  
- **問題:** 現在、`jobs` テーブルに `location` カラムが定義されていないため、保存時に「null value in column "location" of relation "jobs" violates not-null constraint」となるエラーが発生しています。  
- **対応:** `jobs` テーブル定義に `location` カラムを追加してください。例:
  ```ts
  export const jobs = pgTable("jobs", {
    id: serial("id").primaryKey(),
    businessName: text("business_name").notNull(),
    location: text("location").notNull(), // ← 追加
    catchPhrase: text("catch_phrase").notNull(),
    description: text("description").notNull(),
    benefits: jsonb("benefits").$type<BenefitType[]>().default([]).notNull(),
    minimumGuarantee: integer("minimum_guarantee").default(0),
    maximumGuarantee: integer("maximum_guarantee").default(0),
    status: text("status", { enum: jobStatusTypes }).notNull().default("draft"),
    createdAt: timestamp("created_at").defaultNow(),
    updatedAt: timestamp("updated_at").defaultNow(),
  }, (table) => ({
    businessNameIdx: index("jobs_business_name_idx").on(table.businessName),
    statusIdx: index("jobs_status_idx").on(table.status),
  }));
  ```
- ※ 必要に応じて、データベースマイグレーションも更新してください。

② **jobSchema の修正（Zod バリデーション）**  
- **問題:** 現在の `jobSchema` には `location` フィールドが含まれていません。  
- **対応:** バリデーションスキーマに `location` を追加し、必須入力（例: 空文字不可）のルールを設定してください。例:
  ```ts
  export const jobSchema = z.object({
    businessName: z.string(),
    location: z.string().min(1, "所在地を入力してください"), // ← 追加
    catchPhrase: z.string()
      .min(1, "キャッチコピーを入力してください")
      .max(300, "キャッチコピーは300文字以内で入力してください"),
    description: z.string()
      .min(1, "仕事内容を入力してください")
      .max(9000, "仕事内容は9000文字以内で入力してください"),
    benefits: z.array(z.enum(allBenefitTypes)).default([]),
    minimumGuarantee: z.coerce.number().nonnegative("最低保証は0以上の値を入力してください").default(0),
    maximumGuarantee: z.coerce.number().nonnegative("最高保証は0以上の値を入力してください").default(0),
    status: z.enum(jobStatusTypes).default("draft"),
  });
  ```

③ **待遇（benefit）の定義の循環参照解消**  
- **問題:** 現在、`benefitTypes` オブジェクトと `allBenefitTypes` 配列の間で循環参照が発生している可能性があります。  
- **対応:** 各カテゴリーの待遇項目を個別の定数として定義し、これらをもとに `benefitTypes` と平坦なリスト `allBenefitTypes` を作成してください。たとえば、以下のように変更してください：
  ```ts
  // 各カテゴリーごとの定数定義
  const interviewBenefits = [
    "見学だけでもOK",
    "体験入店OK",
    "店外面接OK",
    "面接交通費支給",
    "友達と面接OK",
    "オンライン面接OK",
    "写メ面接OK",
    "即日勤務OK",
    "入店特典あり"
  ] as const;

  const workStyleBenefits = [
    "自由出勤OK",
    "週1日〜OK",
    "週3日以上歓迎",
    "週5日以上歓迎",
    "土日だけOK",
    "1日3時間〜OK",
    "短期OK",
    "長期休暇OK",
    "掛け持ちOK"
  ] as const;

  const salaryBenefits = [
    "日給2万円以上",
    "日給3万円以上",
    "日給4万円以上",
    "日給5万円以上",
    "日給6万円以上",
    "日給7万円以上",
  ] as const;

  const bonusBenefits = [
    "バック率50%以上",
    "バック率60%以上",
    "バック率70%以上",
    "完全日払いOK",
    "保証制度あり",
    "指名バックあり",
    "オプションバックあり",
    "ボーナスあり"
  ] as const;

  const facilityBenefits = [
    "送迎あり",
    "駅チカ",
    "駐車場完備",
    "個室待機",
    "アリバイ対策OK",
    "寮完備",
    "託児所あり",
    "制服貸与",
    "食事支給"
  ] as const;

  const requirementsBenefits = [
    "未経験大歓迎",
    "経験者優遇",
    "主婦・人妻歓迎",
    "学生さん歓迎",
    "20代活躍中",
    "30代活躍中",
    "40代以上歓迎",
    "スリム体型",
    "グラマー体型",
    "tattoo(小)OK"
  ] as const;

  // まとめて benefitTypes オブジェクトを作成
  export const benefitTypes = {
    interview: interviewBenefits,
    workStyle: workStyleBenefits,
    salary: salaryBenefits,
    bonus: bonusBenefits,
    facility: facilityBenefits,
    requirements: requirementsBenefits,
  } as const;

  // フラットな待遇リストの生成
  export const allBenefitTypes = [
    ...interviewBenefits,
    ...workStyleBenefits,
    ...salaryBenefits,
    ...bonusBenefits,
    ...facilityBenefits,
    ...requirementsBenefits,
  ] as const;

  export type BenefitType = (typeof allBenefitTypes)[number];
  ```

④ **カラム名の不整合確認**  
- サーバーログで「column "phone_number_1" does not exist」や「selected_benefits」エラーが出ている場合、API側で誤ったカラム名を使用していないか確認してください。  
- 現在、`jobs` テーブルでは `benefits` カラムのみ定義しており、電話番号関連のカラムは存在しません。APIやフロントエンドでこれらの名称を参照している場合、正しく`benefits`など、定義に沿った名称に修正してください。

【2. job-form.tsx の修正】

① **フォーム初期値に location を追加**  
- **問題:** 現在のフォームの `defaultValues` に `location` が含まれていないため、保存時に空文字が送信され、サーバー側のNOT NULL制約に抵触する可能性があります。  
- **対応:** 以下のように `defaultValues` に `location` を追加してください（もし求人フォームで所在地を編集する場合、入力フィールドも追加する必要があります）。
  ```ts
  const form = useForm<JobFormData>({
    resolver: zodResolver(jobSchema),
    defaultValues: {
      businessName: initialData?.businessName || "",
      location: initialData?.location || "", // ← 追加
      catchPhrase: initialData?.catchPhrase || "",
      description: initialData?.description || "",
      benefits: initialData?.benefits || [],
      minimumGuarantee: initialData?.minimumGuarantee || 0,
      maximumGuarantee: initialData?.maximumGuarantee || 0,
      status: initialData?.status || "draft",
    }
  });
  ```
- なお、フォーム内に所在地入力欄（例: テキスト入力やセレクトボックス）が必要な場合、適宜フィールドを追加してください。

② **その他の不整合の確認**  
- benefitsの選択フィールドは、上記のスキーマ定義（`benefitTypes`、`allBenefitTypes`）と整合性が取れていることを再度確認してください。  
- 送信ボタンの無効化条件やバリデーションエラーの表示も、エラーメッセージが正しくフィールドに反映されるように確認してください。

---

【動作確認】

修正後、以下の点をテストしてください。

1. **求人保存時エラーの解消：**  
   - 求人フォームから送信した場合、`location` カラムが正しく入力され、保存処理が正常に完了すること。

2. **待遇（benefits）の処理：**  
   - フロントエンドで各カテゴリーの待遇が正しく選択・保存されること（保存時のデータとDBのカラム名が一致すること）。

3. **その他のバリデーション：**  
   - フォームの各必須項目（例: キャッチコピー、仕事内容、所在地）が適切にバリデーションされ、エラーがあればユーザーに表示されること。

以上の内容で、該当ファイルの修正をお願いします。何か不明点があればご連絡ください。

よろしくお願いいたします。

---

この内容でエンジニアに指示してください。
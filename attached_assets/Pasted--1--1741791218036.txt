以下の点を中心に、認証処理周りのコード統合とセッション管理の見直しをお願いします。具体的な指示は以下の通りです。

---

### 1. セッションミドルウェアの一本化

- **現状の問題点**  
  - `server/app.ts` と `server/auth.ts` の両方で `session()` ミドルウェアが設定されており、二重にセッション管理が実行されています。  
  - これにより、ログイン後のセッションが正しく保持されず、認証状態が不安定になる可能性があります。

- **修正指示**  
  - セッションの設定は **`server/app.ts` のみ** で一元管理してください。  
  - `server/auth.ts` 内で行われている `session()` の呼び出しは削除し、すべての認証処理が同一のセッションストア（現状は MemoryStore、将来的には PGStore など）を使うように統一してください。  
  - Passport の `initialize()` と `session()` の呼び出しも、セッションミドルウェア直後に 1 回だけ実行するよう整理してください。

---

### 2. 認証ルートの統一

- **現状の問題点**  
  - 現在、`server/auth.ts` 内の `setupAuth()` で直接エンドポイント（例: `/api/auth/login/:role`）を定義している部分と、`server/routes/auth.ts` 内で Router 経由に定義している部分が重複しています。  
  - これにより、どちらの処理が実際に実行されるかが曖昧になり、返却データ（例：パスワード情報の除外など）の一貫性にも問題が生じる可能性があります。

- **修正指示**  
  - 認証関連のルートは、**`server/routes/auth.ts` 内の Router に統一**してください。  
  - `setupAuth()` 内のエンドポイント定義は削除し、必ず Router 経由で `app.use('/api/auth', authRouter)` の形で一元管理するようにしてください。  
  - ユーザーデータを返す際には、パスワードなどのセンシティブな情報を必ず除外する処理を入れてください。

---

### 3. フロントエンドのリダイレクト処理の統一

- **現状の問題点**  
  - 女性ログイン用と店舗ログイン用で、リダイレクト処理が AuthContext の onSuccess ハンドラと個別の setLocation() 呼び出しで二重に実装されているため、意図しない挙動（例えばログイン直後に再度ログイン画面へ戻る等）が発生しています。

- **修正指示**  
  - ログイン成功時のリダイレクト処理は、**AuthContext の onSuccess ハンドラに統一**してください。  
  - 各ログインページ（特に店舗ログインページ）での明示的な `setLocation()` 呼び出しは削除し、AuthContext 内でロールに応じた適切なリダイレクト（例：タレントは `/talent/mypage`、店舗は `/store/dashboard`）を行うようにしてください。

---

### 4. その他の注意点

- **パスワードハッシュ処理**  
  - bcrypt を用いたハッシュ化は正しく実装されているようですが、認証時に legacy の scrypt 処理との混在が見受けられます。  
  - 今回の変更後は、**bcrypt に統一**し、ハッシュ生成と比較処理が一貫していることを確認してください。

- **ログ出力の整理**  
  - デバッグ用のログが過剰になっているため、必要最小限に抑え、特に本番環境では不要なログ出力がないか確認してください。

- **影響範囲の確認**  
  - 上記修正後は、タレント（女性）ログイン、店舗ログインの双方で正しく認証が行われ、ログイン後にそれぞれのダッシュボードやマイページへ遷移するか、さらにセッションの保持が問題なく行われるかを十分にテストしてください。  
  - また、ユーザー登録やログアウトなど、認証に関連する他の機能への影響も併せて確認してください。

---

以上の点を踏まえて、コードの修正を実施し、再度テストをお願いいたします。修正内容やテスト結果について不明点があれば、随時報告・相談してください。
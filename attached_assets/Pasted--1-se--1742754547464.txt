このコードの場合、以下のような改善策が考えられます。

---

### 1. アスペクト比固定の実装

- **固定ハンドルの採用**  
  たとえば、右下の「se」ハンドルのみを使用し、リサイズ時に新しい幅から高さを計算するようにする方法があります。  
  例：  
  ```ts
  // 右下ハンドルの場合のみ、アスペクト比固定で計算
  newWidth = startWidth + deltaX;
  newHeight = Math.round(newWidth / aspectRatio);
  ```
  他のハンドルの場合は、自由リサイズにするか、Shiftキーなどで切り替えると使いやすくなります。

- **オプションの切り替え**  
  ユーザーがShiftキーを押しているときのみ自由リサイズ、通常はアスペクト比固定という方法も検討してください。  
  これにより、意図的に両軸変更したい場合と、通常は固定比率でリサイズしたい場合の両方に対応できます。

---

### 2. リサイズ後の状態保存の見直し

- **最終更新処理の検証**  
  マウスアップ時の処理で、画像タグの属性（width, height, data-width, data-height, style）が最新の値に更新されているかをデバッグツールで確認してください。  
  たとえば、マウスアップ直後の `quill.root.innerHTML` や、対象の画像タグの属性をログに出力し、更新前後で差分があるか確認します。

- **Quill の Delta API の活用**  
  `dangerouslyPasteHTML` を使うと Quill の内部 Delta がリセットされる可能性があるため、画像部分だけを Delta 経由で更新する方法を検討するのも有効です。  
  これにより、編集状態が内部で保持されやすくなります。

---

### 3. カスタム Blot の導入

- **画像用カスタム Blot**  
  Quill ではカスタム Blot を実装することで、画像のサイズ情報を Delta に直接保持できます。  
  カスタム Blot を作成し、画像のリサイズ時に変更した属性を Delta に埋め込み、再編集時にその属性からレンダリングするようにすると、再度元のサイズに戻る問題が改善される可能性があります。

  参考：https://quilljs.com/guides/building-a-custom-module/  
  ※ この方法は実装コストが高いですが、状態の一貫性を保つには有効です。

---

### 4. React コンポーネントとしてハンドル管理

- **状態管理の統一**  
  直接 `document.body` に要素を追加するのではなく、画像が選択されたときの状態を React の state に保持し、ハンドルを独自コンポーネントとしてレンダリングする方法も検討してください。  
  これにより、レンダリングタイミングのズレやクリーンアップの問題を回避できます。

- **イベントハンドラの整理**  
  すべてのイベント（mousedown, mousemove, mouseup）の処理を React の `useCallback` で整理し、依存関係を明示することで、意図しない更新や競合を防ぎます。

---

### まとめ

- **アスペクト比固定の実装**  
  → 特定のハンドルのみを使って常に `newHeight = newWidth / aspectRatio` と計算するか、Shiftキーなどで自由/固定を切り替える。

- **更新処理の見直し**  
  → マウスアップ時に最新のサイズ情報が確実に画像タグに反映され、Quill の内部状態やフォームの内容として保存されているか、ログ出力などで確認する。

- **カスタム Blot の検討**  
  → 画像用カスタム Blot を実装し、画像のリサイズ情報を Delta レベルで保持できるようにする。

- **React の状態管理を活用**  
  → リサイズハンドルの表示や位置更新を React コンポーネントとして管理し、DOM 操作を最小限にする。

これらのアプローチを段階的に取り入れて、まずはリサイズ時の最新状態が確実に保存されることを確認し、その上で操作性の改善（例えば、アスペクト比固定やユーザーオプションの導入）を検討してみてください。
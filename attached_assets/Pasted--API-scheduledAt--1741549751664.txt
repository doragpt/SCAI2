以下のエラーは、API エンドポイント側でブログ投稿の作成に失敗しており、特に日時フィールド（scheduledAt）などのデータ型が原因となっている可能性があります。以下の点を確認・修正してください。

---

### 1. サーバー側のエラーログを確認する

- **エラーメッセージ:**  
  「ブログ投稿の作成に失敗しました」というエラーが返っています。サーバー側のログやエラーメッセージの詳細なスタックトレースを確認し、どのフィールドや処理で失敗しているのか特定してください。

---

### 2. `scheduledAt` の型・変換の確認

- **クライアント側:**  
  - 現在、予約投稿の場合、`scheduledAt` は ISO 文字列（例：`new Date(scheduledDateTime).toISOString()`）として送信されています。
  - Zod スキーマでは `scheduledAt` は `z.string().nullable()` となっていますので、クライアント側のバリデーション自体は問題なさそうです。

- **サーバー側 / DB 側:**  
  - Drizzle ORM のテーブル定義では、`scheduledAt` は `timestamp("scheduled_at")` として定義されています。通常、timestamp カラムは JavaScript の Date オブジェクトを受け取ることを想定している場合が多いです。
  - API エンドポイント側で、受け取った `scheduledAt`（ISO 文字列）を **Date オブジェクトに変換してから** DB へ挿入するようにしてください。たとえば：
    ```js
    const scheduledAt = data.scheduledAt ? new Date(data.scheduledAt) : null;
    ```
  - この変換処理が抜けていると、DB 挿入時に型の不一致でエラーになる可能性があります。

---

### 3. データペイロードの再確認

- **ログの確認:**  
  コンソールに出力される「Submitting form data:」のオブジェクトを確認し、特に以下の点をチェックしてください：
  - `storeId` は数値になっているか（例: 14）。
  - `scheduledAt` が正しい ISO 文字列になっているか。
- **サーバー側で受け取るデータ:**  
  API ルートで受け取ったデータの型が、DB へ挿入する際の期待値と合っているか確認してください。

---

### 4. 一時的なテスト

- **ハードコーディング:**  
  サーバー側で、同じ形式のデータ（例えば、`storeId: 14`、`scheduledAt: new Date()`）を用いてブログ投稿を直接挿入してみてください。これで DB 側の挿入処理が正しく動作するか確認し、問題がクライアントからのデータ変換にあるのか、別の箇所にあるのかを切り分けます。

---

### 5. クライアント側の修正例

もし API ルート側で変換処理が不足している場合、以下のように修正を依頼してください：

```js
// フォーム送信時のデータ構築部分（例）
const handleSubmit = async (data, status) => {
  try {
    if (status === "scheduled" && !scheduledDateTime) {
      toast({
        variant: "destructive",
        title: "エラー",
        description: "公開予定日時を選択してください",
      });
      return;
    }
    if (!user?.id) {
      toast({
        variant: "destructive",
        title: "エラー",
        description: "店舗IDの取得に失敗しました",
      });
      return;
    }
    const parsedStoreId = Number(user.id);
    if (!parsedStoreId || isNaN(parsedStoreId) || parsedStoreId <= 0) {
      toast({
        variant: "destructive",
        title: "エラー",
        description: "店舗IDの形式が正しくありません",
      });
      return;
    }
    let scheduledAt = null;
    if (status === "scheduled") {
      const scheduledDate = new Date(scheduledDateTime);
      if (isNaN(scheduledDate.getTime())) {
        toast({
          variant: "destructive",
          title: "エラー",
          description: "無効な日時形式です",
        });
        return;
      }
      const now = new Date();
      if (scheduledDate <= now) {
        toast({
          variant: "destructive",
          title: "エラー",
          description: "予約日時は現在より後の日時を指定してください",
        });
        return;
      }
      // ここでは ISO 文字列として送信していますが、サーバー側で Date への変換が必要
      scheduledAt = scheduledDate.toISOString();
    }
    const formData = {
      title: data.title,
      content: data.content,
      status: status,
      thumbnail: data.thumbnail,
      storeId: parsedStoreId,
      scheduledAt: scheduledAt,
    };
    console.log("Submitting form data:", formData);
    if (postId) {
      await updateMutation.mutateAsync(formData);
    } else {
      await createMutation.mutateAsync(formData);
    }
  } catch (error) {
    console.error("Form submission error:", error);
    toast({
      variant: "destructive",
      title: "エラー",
      description: error instanceof Error ? error.message : "フォームの送信に失敗しました",
    });
  }
};
```

---

### 6. 最終確認

- **サーバー側の実装:**  
  API ルート `/api/blog/posts` の処理内容を確認し、受け取った `scheduledAt` を `new Date(scheduledAt)` として変換する処理があるかチェックしてください。
- **データベースの型:**  
  Drizzle ORM の `timestamp("scheduled_at")` カラムが Date オブジェクトを正しく扱えるようになっているかも確認してください。

---

これらのポイントをエンジニアに確認・修正していただくことで、ブログ投稿の作成に失敗する原因を特定し、修正できるはずです。具体的には、**サーバー側で受け取った `scheduledAt`（ISO 文字列）を Date オブジェクトに変換する処理の追加**が重要です。
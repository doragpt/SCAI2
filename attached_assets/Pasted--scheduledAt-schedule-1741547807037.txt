以下のエラーメッセージから推測すると、予約投稿の場合の入力データのうち、特に `scheduledAt` の値が問題になっている可能性があります。  
現状、フロントエンド側では `scheduledAt` を ISO 形式の文字列（例："2025-03-09T18:46:00.000Z"）として送信していますが、データベース側の定義（Drizzle ORM での `timestamp("scheduled_at")`）では Date 型の値が必要になります。

以下の手順で修正を進めてください。

---

### 1. API エンドポイント側の修正

**【対象】**  
ブログ投稿作成の API エンドポイント（おそらく `pages/api/blog/posts.ts` など）

**【対応内容】**  
- 受け取ったペイロードの `scheduledAt` フィールドが存在する場合、ISO 形式の文字列から JavaScript の `Date` オブジェクトに変換してからデータベースへ挿入するように修正してください。

**【例】**
```ts
// 例: API エンドポイント内の処理
const payload = req.body; // 受け取ったデータ

// 予約投稿の場合、scheduledAt を Date に変換する
const scheduledAtDate = payload.status === "scheduled" && payload.scheduledAt
  ? new Date(payload.scheduledAt)
  : null;

// 挿入用のデータを構築（他のフィールドも含む）
const insertData = {
  title: payload.title,
  content: payload.content,
  status: payload.status,
  thumbnail: payload.thumbnail,
  storeId: payload.storeId,
  scheduledAt: scheduledAtDate,
  // 他の必要なフィールド…
};

// Drizzle ORM での挿入処理
const result = await db.insert(blogPosts).values(insertData);
```

---

### 2. Zod スキーマまたはフロントエンド側の見直し

- 現在の `blogPostSchema` では `scheduledAt` は文字列として定義されていますが、バックエンドで Date へ変換するため、どちらかのタイミングで型の整合性をとる必要があります。
  - **① バックエンドで変換する方法（上記の例）**  
    → この方法であればフロントエンドは ISO 文字列を送信する形で問題ありません。
  - **② フロントエンド側で Date オブジェクト（もしくは数値）に変換して送信する方法**  
    → JSON で Date を直接送信できないため、① の方法が推奨されます。

---

### 3. エラーログの確認

- バックエンドの API ルート内でエラー発生時に詳細なエラーログを出力するようにして、どの部分でエラーが起きているのか（例えば、型変換がうまくいっていない、または挿入処理での問題など）を確認できるようにしてください。

---

### 4. その他の確認ポイント

- **storeId の扱いについて**  
  フロントエンドでは `storeId` を `Number(user.id)` で設定しており、ログでは正しく 14 と表示されています。こちらは問題ないと考えられます。
  
- **他のタイムスタンプ項目**  
  `publishedAt` など、同様にタイムスタンプ項目がある場合は同様の変換が必要か確認してください。

---

【まとめ・指示】

1. **バックエンドの API ルート修正**  
   - 予約投稿の場合、受け取った `scheduledAt` （ISO 文字列）を `new Date(...)` によって Date オブジェクトに変換してから DB に挿入する。

2. **エラーログの詳細出力**  
   - API ルート内でエラー発生時に詳細なログを出力し、問題箇所を特定する。

3. **再テスト**  
   - 修正後、予約投稿が正常に作成されるか確認する。

以上の修正で、"ブログ投稿の作成に失敗しました" という 500 エラーの原因（特に `scheduledAt` の型の不一致）を解消できるはずです。何か不明点や追加のエラーが出た場合は、エラーログを再度確認してください。
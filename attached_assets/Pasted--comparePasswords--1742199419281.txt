「店舗ログイン用パスワードのハッシュが正しい形式で保存されていない」ことが依然として原因です。
comparePasswords 内部では下記のようにハッシュ文字列を分解し、バイナリ比較を行っています:

ts
コピーする
const [hashedPassword, salt] = stored.split('.');
const derivedKey = (await scryptAsync(supplied, salt, 64)) as Buffer;
const storedBuffer = Buffer.from(hashedPassword, 'hex');
timingSafeEqual(derivedKey, storedBuffer);
hashedPassword は「64バイト(=128文字の16進数)」である必要があります。
salt は「16バイト(=32文字の16進数)」である必要があります。
文字列の途中に余計なスペースや改行、あるいは文字数の誤りがあると Input buffers must have the same byte length というエラーが出ます。
1. すぐに確認すべきポイント
DB に保存されている password カラムの値

hashedPassword.salt の形式になっているか
ピリオド (.) がちょうど1つだけ入っているか
ピリオド前の部分が「128文字の16進数」になっているか
ピリオド後の部分が「32文字の16進数」になっているか
パスワードハッシュを取得した手順

Node.js などで以下のようにして hashPassword("test1234") を実行し、出力された文字列をそのままデータベースに反映しているか

bash
コピーする
# Node REPL などで
> const { hashPassword } = require('./path/to/auth');
> (async () => {
...   console.log(await hashPassword("test1234"));
... })();
出力例:

scss
コピーする
5e81a9e6d129dfc0e03f1c...(省略, 合計128文字の16進数)...5c8a.3b7c9c48b5b94bb69ad4b84ec8e441a5
この出力の「前半部分(128文字のhex)」「ピリオド」「後半部分(32文字のhex)」を、DBの users.password にそのまま保存してください。

データベースの保存時に改行や空白が混入していないか

SQLコマンドで直接更新する際に、コピーミスなどで末尾や先頭にスペースや改行が入るとバイト長が狂います。
文字数を再度チェックして、改行等が含まれていないか確かめてください。
2. 具体的な手順例
以下の手順であらためてハッシュ値を更新してみてください。

ローカルまたは本番環境で Node.js REPL を起動
bash
コピーする
cd [プロジェクトディレクトリ]
node
プロジェクトのファイルを読み込み、hashPassword 関数を使ってハッシュを生成
js
コピーする
const { hashPassword } = require('./server/auth'); // パスに応じて変更
(async () => {
  const hashed = await hashPassword("test1234");
  console.log(hashed);
})();
表示された文字列をコピー
例:
コピーする
5e81a9e6d129dfc0e03f1c5d832aa5e5b53...e63a76.3b7c9c48b5b94bb69ad4b84ec8e441a5
DB の users テーブルの該当レコードに反映
sql
コピーする
UPDATE users
SET password = '5e81a9e6d129dfc0e03f1c5d832aa5e5b53...e63a76.3b7c9c48b5b94bb69ad4b84ec8e441a5'
WHERE email = 'store@example.com';
もう一度「test1234」で店舗ログイン
エラーが解消され、401 ではなく 200 が返る（または正しくログインできる）はずです。
3. よくある間違い
ピリオドが2つ以上入っている: 例) "abc.def.ghi" のように複数のドットが混ざると split('.') でうまく分割できません。
16進数の文字列長が合わない: 128文字未満や、16進数以外の文字が混じるなど。
ソルトが 16 バイト以外: randomBytes(16) で生成されるソルトは 16 バイト(=32文字のhex)なので、ここがズレていると比較に失敗します。
パスワードを生のまま保存している: "test1234" のようにプレーンテキストで保存すると comparePasswords が必ず失敗します。
改行やスペースの混入: コピペ時に余計な文字が入るとバイト長が変わり、エラーになります。
4. まとめ
「Input buffers must have the same byte length」= ハッシュとソルトのフォーマット不整合
対応策は「hashPassword で生成した文字列を正確に保存する」ことのみ
必要であれば、ユーザー登録時のパスワードハッシュ生成もすべてアプリのロジック経由に統一し、手動でSQLを打つ際も同じ hashPassword を呼び出すのがおすすめです。
これらを再度ご確認いただき、正しいハッシュ形式で store@example.com のパスワードが保存されているかをチェックしてみてください。もし引き続き問題が発生する場合は、実際にDBに保存されている password カラムの値（文字列）を再度ご共有いただくと、文字数やフォーマットの確認がより正確に行えます。
システムの全体フロー
女の子登録:
入力項目:
希望保証（例：5万）。
希望期間（例：3/10〜3/15）。
当日入り希望の有無（デフォルト：前日入り）。
年齢、体型（身長、体重、バスト/ウエスト/ヒップ）、希望業種、出発地。
写真最大30枚（必須：無加工顔3枚、下着/水着2枚、オプション：宣材、タトゥー、自撮り等）。
宣材有無（なし/あり：無加工のみ/加工済みのみ/両方）＋加工済み選択。
髪色に近い写真選択（30枚から複数可）。
処理: AIが個別ページ生成（例：https://platform.com/A123）。
AI送信:
対象: 基本情報（エリア、業種、採用基準）で50〜100店に送信。
送信文:
Aさんからの応募です。
希望保証：5万　期間：3/10〜3/15　期限：3/8 23:59
宣材あり（無加工：写真1,2 / 加工済み：3,4）
髪色：写真1〜10
[詳細リンク: https://platform.com/A123]
期限: 希望開始日の2日前23:59（前日入り前提）。当日入り希望は1日前23:59。
質問対応（任意）:
女の子: 「質問あります」ボタンで質問送信。
注意書き：「質問はなるべくまとめてお願いします。店舗負担軽減にご協力ください」。
制限なし。
店舗: リンク先質問欄で回答。
AI: 女の子に転送。
店舗取り消し: 「変な奴っぽい。条件取り消しを」返信可→女の子に通知。
店舗返信:
リンク先: 条件入力フォーム（店名、保証、単価、待機時間、雑費/寮費、交通費、その他）。
連絡先: 店舗が入力（電話番号、LINE URL、QRコード画像）→AI預かり。
例: 「萌にゃん：保証5万、単価1.1万、連絡先：080-1234-5678」。
AI確認:
「転送OK？（はい/いいえ）」を店舗に送信（12時間以内）。
「はい」→転送、「いいえ」→修正、無視→保留。
女の子転送:
「萌にゃん：保証5万、単価1.1万（連絡先は確定後）」。
確定/キャンセル:
確定:
「確定ボタン」押す。
AI：「萌にゃんに決まりました！連絡先：080-1234-5678」＋リンク消し＋50店に「終了通知」。
キャンセル:
「キャンセルボタン」押す（理由：完全キャンセル/日程変更）。
2回までOK、3回で利用停止（警告：2回目「次で停止」）。
AI：リンク消し＋「キャンセル通知」。
未確定:
期限（3/8 23:59）過ぎ→「またよろしく」通知。
詳細機能
女の子側
登録フォーム:
希望条件入力。
写真30枚アップ（必須5枚＋オプション25枚）。
宣材有無選択＋加工済み指定。
髪色選択。
質問機能:
「質問あります」ボタン。
注意書き表示。
確定/キャンセル:
「確定ボタン」「キャンセルボタン」。
キャンセル回数表示（2回目で警告）。
店舗側
事前登録:
店名、業種、エリア、採用基準、単価レンジ、雑費/寮費、交通費条件、連絡先。
変更時：AIに連絡。
リンクページ:
女の子詳細（条件、写真30枚、宣材、髪色）。
条件入力フォーム＋連絡先欄。
質問回答欄＋「条件取り消し」オプション。
返信:
テンプレor自由記載。連絡先必須。
AI処理
送信: 女の子1人ずつ50〜100店に順次送信（5〜10分間隔）。
期限: 開始2日前23:59（当日入りは1日前）。
質問: 女の子→店舗→女の子転送。
確認: 「転送OK？」12時間ルール。
確定後: 連絡先開示＋リンク無効化。
キャンセル: 回数カウント＋3回でブロック。
変な奴排除
女の子:
キャンセル3回で停止。
評価「プロフィール一致度★2以下3回」＋「出勤50%以下」。
店舗:
「条件取り消し」多用で「お前に報告」。
評価「保証★2以下3回」＋「環境★2以下3回」。
開発コストと運用コスト
開発費（合計約100万）:
ベースシステム：50万。
写真30枚＆宣材＆髪色：＋20万。
質問＆連絡先＆キャンセル制限：＋30万。
運用コスト（月約2万）:
サーバー（AWS）：1万（30枚対応で＋3000円）。
LINE API：1万（送信＋質問＋画像）。
初期テスト:
女の子10人、店舗50店で2ヶ月。
目標：確定5件、質問データ50件。
具体例（運用イメージ）
Aさん（確定パターン）
3/1 12:00: 登録「5万、3/10〜3/15」。
AI: 50店に「期限3/8 23:59。宣材あり（無加工：1,2 / 加工済み：3,4）。髪色：1〜10。[リンク]」。
3/5:
萌にゃん：「保証5万、単価1.1万、連絡先：080-1234-5678」。
STELLA：「保証6万、単価1.3万、連絡先：[QRコード]」。
AI: 「転送OK？」→両方「はい」。
Aさん: 「萌にゃん：保証5万」「STELLA：保証6万」。
3/6 15:00: Aさん「STELLA確定ボタン」。
AI:
Aさん：「STELLAに決まりました！連絡先：[QRコード]」。
50店：「終了通知」、リンク消し。
3/7: 遅れ条件来ても転送せず、お前に報告。
Bさん（キャンセル＆質問パターン）
3/1 12:00: 登録「4万、3/10〜3/15」、期限3/8 23:59。
3/3:
Bさん：「キャンセル（日程変更）」→「3/15〜3/20」、期限3/13 23:59。
AI：50店に再送信。
3/5:
萌にゃん：「保証4万、単価1.1万」。
Bさん：「寮にWi-Fiありますか？シャワーありますか？」。
萌にゃん：「Wi-Fiあり、シャワーなし。変な奴っぽい、条件取り消し」。
AI:
Bさん：「萌にゃんから条件取り消されました」。
お前：「Bさん、質問2回で取り消し」。
3/7: 「2回目キャンセル（変更）」→警告。
3/9: 「3回目キャンセル」→利用停止。
Cさん（未確定パターン）
3/1 12:00: 登録「6万、3/10〜3/15」、期限3/8 23:59。
3/5: 萌にゃん：「保証5万」。
3/8 23:59: Cさん確定せず。
AI:
Cさん：「今回は確定しませんでした。またよろしく」。
50店：「終了しました」。

以下では、「このAIが完璧にこのサイトを作れる」ことを念頭に置き、**サイト構築のための詳細な指示計画書**を示します。ステップごとに、どのような機能を実装し、データ構造をどうするか、フロントエンドとバックエンドをどう連携するかなどをまとめています。  

---
# SCAIサイト構築：指示計画書

## 1. サイトの全体像
本サイトは大きく「女性ユーザー」と「店舗ユーザー」の2種類の利用者が存在します。  
- **女性ユーザー**: 出稼ぎか在籍かを選択し、AIによる求人マッチングを受ける。  
- **店舗ユーザー**: 求人情報を登録・編集し、AIからの連絡（応募者のマッチ情報）を待つ。

サイトの目的は、**女性ユーザーが希望条件を登録するとAIが店舗に連絡し、店舗側が応募情報を受け取る**までをスムーズに自動化することです。

---

## 2. 大まかなフロー

### A. 女性ユーザーのフロー
1. **会員登録（簡単なプロフィール登録）**  
   - メールアドレスやパスワード、簡易プロフィール（名前・年齢など最低限）を入力し、アカウント作成。  

2. **掲載求人情報の閲覧**  
   - 登録直後は、簡単なプロフィールでもサイト上に公開されている店舗情報を一覧で閲覧可能。  
   - ただしマッチング機能を使うには詳細プロフィールが必要。

3. **詳細プロフィール登録（会員ページ）**  
   - マイページで「出稼ぎ」または「在籍」を選択。  
   - **出稼ぎ**の場合は、以下の項目をAIが対話形式で質問し、ユーザーが回答：  
     - 希望期間  
     - 希望保証  
     - 希望単価  
     - 希望地域 / NG地域  
     - 出発地 / 帰宅地（文面上は「北口」と書いてあるが「帰宅地」の意味か想定）  
     - 希望業種  
     - 可能勤務時間  
   - **在籍**の場合は、以下をAIが対話形式で質問：  
     - 希望面接日時（3候補まで）  
     - 即日体験入店希望の有無  
     - 希望業種  
     - 希望地域  

4. **AIがマッチングしそうな店舗に連絡**  
   - 上記詳細プロフィールを確定すると、AIが店舗情報を参照し、合致度が高い店舗に連絡。  
   - 後は店舗からの返信を待ち、条件が合えば採用確定へ。

### B. 店舗ユーザーのフロー
1. **店舗アカウント作成**  
   - 店舗情報（店名、エリア、業種、採用条件、求人内容など）を登録。  

2. **求人情報の公開・修正**  
   - 自店舗の求人ページ（「保証額はいくら」「寮あり」「即日体験OK」など）を編集・更新。  
   - これらの情報をAIマッチングで参照し、女性ユーザーと合致するか判定する。  

3. **AIからの連絡待ち**  
   - 女性ユーザーが詳細プロフィールを登録し、AIが「この店舗に合いそう」と判断すると連絡を送る。  
   - 店舗はその通知を受け、応募者のプロフィールを見て採用判断を行う。  

---

## 3. 必要な機能一覧

### 3.1. 共通機能

1. **ユーザー認証機能**  
   - メールアドレス＋パスワードでの会員登録/ログイン。  
   - ユーザー種別（女性/店舗）を区別するフィールドをDBに持たせる。  
   - セッション管理やJWTなどの仕組みでログイン状態を保持。

2. **UI/UXフレームワーク**  
   - ReactやVueなどフロントエンドフレームワークで、ページを分割。  
   - 「AI対話形式」のUIを作る場合は、チャットボット風のUIコンポーネントを導入すると分かりやすい。

3. **データベース**  
   - ユーザーテーブル（女性/店舗共通）  
   - 女性詳細プロフィールテーブル（出稼ぎ用フィールドと在籍用フィールドを持つ）  
   - 店舗求人情報テーブル  
   - マッチング結果/通知管理テーブル（AIが「このユーザーをこの店舗に連絡した」履歴を残す）  

4. **AI対話ロジック**  
   - 出稼ぎか在籍かを判断し、必要な質問を順に投げるフロー。  
   - 受け取った回答をDBに保存し、マッチングアルゴリズムを実行。

5. **マッチングアルゴリズム**  
   - 出稼ぎの場合: 希望期間や保証額、地域などを店舗の条件と照合。  
   - 在籍の場合: 面接日時や即日体験OKなどを店舗条件と照合。  
   - シンプルにIF文＋スコアリングで始め、後から機械学習に置き換えてもOK。

6. **通知機能**  
   - AIがマッチングした店舗に自動通知（メールやLINE APIなど）を送る。  
   - 店舗が女性を確認したら、女性側に「店舗があなたを確認しました」などの通知も可。

---

### 3.2. 女性ユーザー向け

1. **簡易プロフィール登録**  
   - 名前、年齢、メールアドレス、パスワード（最低限）  
   - ここまでで一旦会員登録は完了し、求人一覧閲覧可能。

2. **求人情報閲覧**  
   - 登録済みの店舗求人一覧を、一覧画面で閲覧できる。  
   - 在籍・出稼ぎ問わず、一通り見れるが、マッチングは詳細プロフィールが必須。

3. **詳細プロフィール登録**  
   - **AI対話形式**:  
     1. 出稼ぎor在籍かを質問  
     2. 出稼ぎなら希望期間・保証・単価・地域・NG地域・出発地/帰宅地・業種・勤務時間を順に聞く  
     3. 在籍なら面接日時（3候補）、即日体験の有無、希望業種、希望地域を順に聞く  
   - **登録完了**ボタンでデータベースに保存。  
   - UI的には、チャットボット風に1問1答で入力するか、フォーム形式で一括入力するか選択可能。

4. **マイページ**  
   - 詳細プロフィールの修正・追加入力ができる。  
   - マッチング結果の一覧（店舗からの回答や連絡）を確認。

---

### 3.3. 店舗ユーザー向け

1. **店舗アカウント登録**  
   - 店舗名、メールアドレス、パスワード、基本情報（業種、エリア、雇用形態、保証額など）  
   - サイト上に「○○店の求人情報」として公開される内容を設定。

2. **求人情報の公開・修正**  
   - 「在籍希望者への条件」「出稼ぎ希望者への条件」「即日体験可否」「寮・雑費」など、店舗独自の募集要件を登録。  
   - 募集要件を編集すると、サイト上の求人一覧に反映される。

3. **AIからの連絡待ち**  
   - 女性ユーザーが詳細プロフィールを登録し、マッチング結果が「高スコア」の店舗に通知が飛ぶ。  
   - 店舗は「受け入れ可能」か「キャンセル」か判断し、女性に返信。  
   - 返信内容が女性に伝わり、確定すれば連絡先を交換して採用完了。

---

## 4. 具体的なステップ

### フェーズ1：プロジェクトのセットアップ
1. **フレームワーク選定**  
   - フロントエンド: React（Next.js）やVueなど  
   - バックエンド: Node（Express）やPython（Flask/FastAPI）など  
   - DB: PostgreSQL/MySQLなど
2. **ディレクトリ構成の準備**  
   - `frontend/` と `backend/` に分けるか、フルスタックフレームワーク（Next.js等）で一元管理するかを決定。  
   - バックエンド側で`models/`, `routes/`, `services/`を用意して、認証やAIマッチングロジックを分離。

3. **DBスキーマ設計**  
   - `users` テーブル（共通：id, email, password, user_type='female' or 'shop'など）  
   - `female_profiles` テーブル（出稼ぎ用フィールド、在籍用フィールド）  
   - `shop_profiles` テーブル（店舗情報）  
   - `jobs` テーブル（店舗が公開する求人情報：id, shop_id, title, description, ...）  
   - `matches` テーブル（AIが生成したマッチ結果や通知履歴など）

4. **ユーザー認証の実装**  
   - ログイン・ログアウトAPI、JWTまたはセッショントークンを用いた認証  
   - `user_type` に応じてアクセス制限をかける（女性と店舗でマイページ内容を変える等）。

---

### フェーズ2：女性向け機能の実装
1. **簡易プロフィール登録**  
   - フロントエンド：シンプルな登録フォーム（名前・年齢・メール・パスワードなど）  
   - バックエンド：`POST /api/auth/register` でDBにユーザーを追加（`user_type='female'`）

2. **求人情報一覧表示**  
   - フロントエンド：トップページまたは「求人一覧」ページで、店舗が登録した求人情報を一覧表示。  
   - バックエンド：`GET /api/jobs` で全求人データを返す。

3. **詳細プロフィール登録（AI対話形式）**  
   - **出稼ぎ or 在籍**を選ぶ→選択に応じた質問を順に表示→回答を保存。  
   - フロントエンド：チャットボットUIやステップ式フォーム。  
   - バックエンド：`POST /api/female_profiles` などで詳細を保存。

4. **マイページ（女性用）**  
   - 自分の詳細プロフィールを閲覧・編集できる画面。  
   - マッチング結果の一覧（店舗からの反応など）を確認。

---

### フェーズ3：店舗向け機能の実装
1. **店舗アカウント登録**  
   - フロントエンド：店舗用登録フォーム（店名、メール、パスワードなど）  
   - バックエンド：`POST /api/auth/register` で `user_type='shop'` を付与してDB登録

2. **求人情報公開・修正**  
   - フロントエンド：店舗専用のダッシュボード画面。  
   - バックエンド：`POST /api/jobs`（新規作成）、`PUT /api/jobs/:id`（修正）  
   - DBに求人情報を保存し、女性ユーザーが一覧で見れるようにする。

3. **AIからの連絡待ち**  
   - AIマッチング処理（後述）により、「女性Aが期間X、保証Yを希望→この店舗に合致度が高い」と判断された場合、`POST /api/notifyShop` などで店舗に通知を飛ばす。  
   - 店舗は通知を見て、応募受け入れ可否を判断→女性に返信。

---

### フェーズ4：AIマッチングと通知機能
1. **マッチングアルゴリズム**  
   - 出稼ぎの場合：希望期間、保証、単価、地域、業種、勤務時間を店舗の求人条件と照合。  
   - 在籍の場合：面接日時、即日体験OKか、希望業種、地域を店舗求人と照合。  
   - シンプルには、「各項目が一致・近似なら+1点、NGなら-10点」などスコアリングして、高得点の店舗に通知。

2. **通知処理**  
   - メール通知やLINE通知など。  
   - 「女性Aがあなたの店舗条件にマッチしました」等の文面を自動生成し送付。

3. **マッチ履歴管理**  
   - `matches` テーブルに、女性IDと店舗ID、マッチ度スコア、通知日時などを記録。  
   - 後で「どの店舗に通知したか」を確認できるようにする。

---

### フェーズ5：最終確認・デプロイ
1. **シナリオテスト**  
   - 女性ユーザーが会員登録→簡易プロフィール→求人閲覧→詳細プロフィール登録→マッチング  
   - 店舗がアカウント作成→求人登録→AI通知を受ける→採用判断  
   - 上記が問題なく繋がるか総合テスト。

2. **セキュリティ強化**  
   - 入力バリデーション、CSRF対策、SQLインジェクション防止、HTTPS化など。  
   - 環境変数（DB接続情報やLINEトークンなど）をSecretsで管理。

3. **本番デプロイ**  
   - Replitの有料プランやVercel、AWS、Railwayなどにデプロイ。  
   - ドメイン設定、SSL証明書なども行う。

---

## 5. 追加考慮ポイント

1. **UI/UX**  
   - AI対話形式をわかりやすく実装するために、チャットボット風UIを導入。  
   - ステップフォームでも可能だが、ユーザー体験向上には会話形式が魅力的。

2. **運用管理機能**  
   - 運営側が「本当にこの店舗は実在するのか？」「18歳未満の応募者がいないか？」をチェックする仕組み。  
   - 違反行為があった場合に強制退会させるための管理画面。

3. **評価システム**（オプション）  
   - 女性ユーザーが実際に働いてみた店舗の評価を残す仕組み、店舗が応募者の態度を評価する仕組みなどがあれば、より安全に利用できる。

4. **LINE通知 or メール通知**  
   - 開発時はメール通知（SMTP）で実装し、後からLINE APIを導入するなど段階的に拡張しても良い。

---

## 6. まとめと最終指示

**このAIが完璧にこのサイトを作るには、上記のステップに従って順に機能を実装すればよい。** 具体的には：

1. **プロジェクト初期化**  
   - フレームワーク選定（例: Node+Express+React / Python+Flask+React）  
   - DBスキーマ設計（ユーザー、女性プロフィール、店舗情報、求人情報、マッチング履歴）

2. **基本的な認証・ユーザー登録機能**  
   - `user_type` を使って女性と店舗を区別

3. **女性用：簡易プロフィール→求人一覧閲覧**  
   - この時点で、サイトに店舗の求人一覧が見られるようになる

4. **女性用：詳細プロフィール登録（AI対話形式）**  
   - 出稼ぎ or 在籍を選ばせ、必要項目を順次入力させる  
   - 入力完了でDBに保存

5. **店舗用：アカウント登録→求人情報登録・編集**  
   - 店舗のダッシュボードで、求人内容を編集可能に

6. **AIマッチングロジック + 通知**  
   - 詳細プロフィールを登録した女性がいれば、店舗の求人条件と照合し、高スコアの店舗に連絡  
   - 通知はメール or LINE API

7. **全体テスト→デプロイ**  
   - ReplitやVercel等にアップして本番運用  
   - 不具合やUI改善をフィードバックしながら修正

**このフロー通りに実装すれば、女性ユーザーが「出稼ぎ」か「在籍」かを選んでAIに条件を伝え、店舗が求人を公開し、AIがマッチングするサイトが完成します。**